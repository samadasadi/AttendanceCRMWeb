
@model long?
@{
    var placeholder = string.Empty;
    var isRadonly = false;

    if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("placeholder"))
    {
        placeholder = ViewData.ModelMetadata.AdditionalValues["placeholder"] as string;
    }
    if (ViewData.ModelMetadata.AdditionalValues.ContainsKey("isReadOnly"))
    {
        isRadonly = (bool)ViewData.ModelMetadata.AdditionalValues["isReadOnly"];
    }
    var name = (ViewData.ModelMetadata).PropertyName;
    var required = ViewData.ModelMetadata.IsRequired;
}
<div class="form-group row  @string.Format("{0}",required?"rqd":"")">
    @Html.LabelFor(model => model, htmlAttributes: new { @class = "control-label col-form-label col-md-3" })
    <div class="col-sm-9">
      
        
        
        @if (isRadonly)
        {
            @Html.MyHelper().TreasuryTextBoxFor(model => model, TextBoxType.Currency, new { @readonly = "readonly"})
        }
        else
        {
            @Html.MyHelper().TreasuryTextBoxFor(model => model, TextBoxType.Currency)
           
        }
        
        
        

        @if (required)
        {
            <span class="field-validation-valid text-danger" data-valmsg-for="@string.Format("{0}Str",name)" data-valmsg-replace="true"></span>
        }
    </div>
</div>
