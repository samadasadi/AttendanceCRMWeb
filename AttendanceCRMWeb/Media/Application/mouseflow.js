var mouseflowDisableKeyLogging = true; if (typeof mouseflow === 'undefined' && typeof mouseflowPlayback === 'undefined') {
    (function () {
        function _761(_3, _105, _14, _22, _8, _242, _17, _196, _300, _128, _307, _190) {
            var _135 = 'https://n2.mouseflow.com/'; var _113 = 'https://app.mouseflow.com'; var _45 = '130d2d9b-7c05-449b-a88f-c2947ce8212c'; var _188 = 0.05000; var _138 = []; var _669 = []; var _200 = ["reg.seller.digikala.com", "seller.digikala.com"]; var _218 = []; var _219 = []; var _253 = []; var _564 = false; var _835 = false; var _172 = '17.26'; var _350 = false; var _566 = false; var _67 = false; var _186 = false; var _336 = false; var _586 = /\[(\d+)\]_mf$/; var _9 = _3.document; var _81 = _3.location; _662(); var _11 = _640(); var _0 = _507(); var _57 = { _518: 100, _672: 250, _671: 10000, _438: 1336, _401: 1800000, _799: 3600000, _870: 7776000000, _631: 100, _801: 2000, _427: 8000, _302: 2048 }; var _398, _347, _399, _227, _244, _201, _411, _290, _209, _400 = [], _394 = []; var _5 = { _250: 0, _258: 1, _257: 2, _288: 3, _279: 4, _280: 5, _287: 6, _189: 7, _380: 8, _283: 9, _202: 10, _428: 11, _430: 12, _273: 13, _591: 14, _85: 15, _880: 16, _875: 17, _96: 18, _303: 19, _652: 20, _379: 21, _378: 22, _276: 23, _372: 24, _408: 25, _370: 26, _376: 27, _377: 28, _463: 29, _383: 30, _467: 31, _368: 32, _281: 33, _488: 34, _182: 35, _437: 36, _431: 37, _48: 38, _402: 39, _630: 40, _224: 41, _89: 42 }; var _86 = { _482: { _25: 'bounce', _4: 2, _49: 1 }, _825: { _25: 'click-rage', _4: 5, _49: 2 }, _462: { _25: 'click-error', _4: 2, _49: 3 }, _538: { _25: 'mobility', _4: 3, _49: 4 }, _189: { _25: 'mouse-out', _4: 1, _49: 5 }, _508: { _25: 'speed-browsing', _4: 1, _49: 6 }, _182: { _25: 'submit-failure', _4: 3, _49: 7 } }; var _661 = /[\x20\r\n]+/g; var _688 = /(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@/; var _690 = /(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35\d{3})\d{11})/; var _654 = /^(onbeforeunload|onblur|onchange|onclick|onfocus|oninput|onkeydown|onkeypress|onkeyup|onload|onmousedown|onmouseenter|onmouseleave|onmousemove|onmouseout|onmouseover|onmouseup|onresize|onsubmit|ontouchcancel|ontouchend|ontouchenter|ontouchleave|ontouchmove|ontouchstart|onunload)$/; var _635 = /checkbox|radio|button|submit|file|image|reset/; function _662() { if (!_3._mfq) _3._mfq = []; for (var _47 = 0; _47 < _3._mfq.length; _47++) { var _43 = _3._mfq[_47]; if (_43 && _43.length && _43[0] === 'config') _14._550.apply(_14, _43.slice(1)) } } function _327(_282) { if (!_282) _282 = []; var _46 = this; _3.setTimeout(function () { for (var _47 = 0; _47 < _282.length; _47++)_46.push(_282[_47]) }, 1) } _327.prototype.push = function (_43) { if (!_43) return; try { if (typeof _43 === 'object' && _43.length) { mouseflow[_43.slice(0, 1)].apply(mouseflow, _43.slice(1)) } else if (typeof _43 === 'function') { _43(mouseflow) } } catch (error) { var _147 = 'Failed to execute item on action queue'; var _530 = _8._69(_43); if (_530) _147 += '\n' + _530; _147 += '\n' + error; _10(_147) } };
            // Copyright 2011 Google Inc.
            //
            // Licensed under the Apache License, Version 2.0 (the "License");
            // you may not use this file except in compliance with the License.
            // You may obtain a copy of the License at
            //
            //     http://www.apache.org/licenses/LICENSE-2.0
            //
            // Unless required by applicable law or agreed to in writing, software
            // distributed under the License is distributed on an "AS IS" BASIS,
            // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            // See the License for the specific language governing permissions and
            // limitations under the License.
            //
            // This component contains modifications carried out by Mouseflow ApS.
            var __extends = this.__extends || function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; function __() { this.constructor = d } __.prototype = b.prototype; d.prototype = new __() }; var MutationObserverCtor; if (typeof WebKitMutationObserver !== 'undefined') MutationObserverCtor = WebKitMutationObserver; else if (typeof MutationObserver !== 'undefined') MutationObserverCtor = MutationObserver; if (MutationObserverCtor === undefined) { _10('DOM Mutation Observers not supported.') } var NodeMap = (function () { function NodeMap() { this.nodes = []; this.values = [] } NodeMap.prototype.isIndex = function (s) { return +s === s >>> 0 }; NodeMap.prototype.nodeId = function (node) { var id = node[NodeMap.ID_PROP]; if (!id) id = node[NodeMap.ID_PROP] = NodeMap.nextId_++; return id }; NodeMap.prototype.set = function (node, value) { var id = this.nodeId(node); this.nodes[id] = node; this.values[id] = value }; NodeMap.prototype.get = function (node) { var id = this.nodeId(node); return this.values[id] }; NodeMap.prototype.has = function (node) { return this.nodeId(node) in this.nodes }; NodeMap.prototype.deleteNode = function (node) { var id = this.nodeId(node); delete this.nodes[id]; this.values[id] = undefined }; NodeMap.prototype.keys = function () { var nodes = []; for (var id in this.nodes) { if (!this.isIndex(id)) continue; nodes.push(this.nodes[id]) } return nodes }; NodeMap.ID_PROP = '__mouseflow_node_map_id__'; NodeMap.nextId_ = 1; return NodeMap })(); var Movement; (function (Movement) { Movement[Movement['STAYED_OUT'] = 0] = 'STAYED_OUT'; Movement[Movement['ENTERED'] = 1] = 'ENTERED'; Movement[Movement['STAYED_IN'] = 2] = 'STAYED_IN'; Movement[Movement['REPARENTED'] = 3] = 'REPARENTED'; Movement[Movement['REORDERED'] = 4] = 'REORDERED'; Movement[Movement['EXITED'] = 5] = 'EXITED' })(Movement || (Movement = {})); function enteredOrExited(changeType) { return changeType === Movement.ENTERED || changeType === Movement.EXITED } var NodeChange = (function () { function NodeChange(node, childList, attributes, characterData, oldParentNode, added, attributeOldValues, characterDataOldValue) { if (childList === void 0) { childList = false } if (attributes === void 0) { attributes = false } if (characterData === void 0) { characterData = false } if (oldParentNode === void 0) { oldParentNode = null } if (added === void 0) { added = false } if (attributeOldValues === void 0) { attributeOldValues = null } if (characterDataOldValue === void 0) { characterDataOldValue = null } this.node = node; this.childList = childList; this.attributes = attributes; this.characterData = characterData; this.oldParentNode = oldParentNode; this.added = added; this.attributeOldValues = attributeOldValues; this.characterDataOldValue = characterDataOldValue; this.isCaseInsensitive = this.node.nodeType === 1 && this.node instanceof HTMLElement && typeof (HTMLDocument) !== 'undefined' && this.node.ownerDocument instanceof HTMLDocument } NodeChange.prototype.getAttributeOldValue = function (name) { if (!this.attributeOldValues) return undefined; if (this.isCaseInsensitive) name = name.toLowerCase(); return this.attributeOldValues[name] }; NodeChange.prototype.getAttributeNamesMutated = function () { var names = []; if (!this.attributeOldValues) return names; for (var name in this.attributeOldValues) { names.push(name) } return names }; NodeChange.prototype.attributeMutated = function (name, oldValue) { this.attributes = true; this.attributeOldValues = this.attributeOldValues || {}; if (name in this.attributeOldValues) return; this.attributeOldValues[name] = oldValue }; NodeChange.prototype.characterDataMutated = function (oldValue) { if (this.characterData) return; this.characterData = true; this.characterDataOldValue = oldValue }; NodeChange.prototype.removedFromParent = function (parent) { this.childList = true; if (this.added || this.oldParentNode) this.added = false; else this.oldParentNode = parent }; NodeChange.prototype.insertedIntoParent = function () { this.childList = true; this.added = true }; NodeChange.prototype.getOldParent = function () { if (this.childList) { if (this.oldParentNode) return this.oldParentNode; if (this.added) return null } return this.node.parentNode }; return NodeChange })(); var ChildListChange = (function () { function ChildListChange() { this.added = new NodeMap(); this.removed = new NodeMap(); this.maybeMoved = new NodeMap(); this.oldPrevious = new NodeMap(); this.moved = undefined } return ChildListChange })(); var TreeChanges = (function (_529) { __extends(TreeChanges, _529); function TreeChanges(rootNode, mutations) { _529.call(this); this.rootNode = rootNode; this.reachableCache = undefined; this.wasReachableCache = undefined; this.anyParentsChanged = false; this.anyAttributesChanged = false; this.anyCharacterDataChanged = false; for (var m = 0; m < mutations.length; m++) { var mutation = mutations[m]; switch (mutation.type) { case 'childList': this.anyParentsChanged = true; for (var i = 0; i < mutation.removedNodes.length; i++) { var node = mutation.removedNodes[i]; this.getChange(node).removedFromParent(mutation.target) } for (var i = 0; i < mutation.addedNodes.length; i++) { var node = mutation.addedNodes[i]; this.getChange(node).insertedIntoParent() } break; case 'attributes': this.anyAttributesChanged = true; var change = this.getChange(mutation.target); change.attributeMutated(mutation.attributeName, mutation.oldValue); break; case 'characterData': this.anyCharacterDataChanged = true; var change = this.getChange(mutation.target); change.characterDataMutated(mutation.oldValue); break } } } TreeChanges.prototype.getChange = function (node) { var change = this.get(node); if (!change) { change = new NodeChange(node); this.set(node, change) } return change }; TreeChanges.prototype.getOldParent = function (node) { var change = this.get(node); return change ? change.getOldParent() : node.parentNode }; TreeChanges.prototype.getIsReachable = function (node) { if (node === this.rootNode) return true; if (!node) return false; this.reachableCache = this.reachableCache || new NodeMap(); var isReachable = this.reachableCache.get(node); if (isReachable === undefined) { isReachable = this.getIsReachable(node.parentNode); this.reachableCache.set(node, isReachable) } return isReachable }; TreeChanges.prototype.getWasReachable = function (node) { if (node === this.rootNode) return true; if (!node) return false; this.wasReachableCache = this.wasReachableCache || new NodeMap(); var wasReachable = this.wasReachableCache.get(node); if (wasReachable === undefined) { wasReachable = this.getWasReachable(this.getOldParent(node)); this.wasReachableCache.set(node, wasReachable) } return wasReachable }; TreeChanges.prototype.reachabilityChange = function (node) { if (this.getIsReachable(node)) { return this.getWasReachable(node) ? Movement.STAYED_IN : Movement.ENTERED } return this.getWasReachable(node) ? Movement.EXITED : Movement.STAYED_OUT }; return TreeChanges })(NodeMap); var MutationProjection = (function () { function MutationProjection(rootNode, mutations, selectors, calcReordered, calcOldPreviousSibling) { this.rootNode = rootNode; this.mutations = mutations; this.selectors = selectors; this.calcReordered = calcReordered; this.calcOldPreviousSibling = calcOldPreviousSibling; this.treeChanges = new TreeChanges(rootNode, mutations); this.entered = []; this.exited = []; this.stayedIn = new NodeMap(); this.visited = new NodeMap(); this.childListChangeMap = undefined; this.characterDataOnly = undefined; this.matchCache = undefined; this.processMutations() } MutationProjection.prototype.processMutations = function () { if (!this.treeChanges.anyParentsChanged && !this.treeChanges.anyAttributesChanged) return; var changedNodes = this.treeChanges.keys(); for (var i = 0; i < changedNodes.length; i++) { this.visitNode(changedNodes[i], undefined) } }; MutationProjection.prototype.visitNode = function (node, parentReachable) { if (this.visited.has(node)) return; this.visited.set(node, true); var change = this.treeChanges.get(node); var reachable = parentReachable; if ((change && change.childList) || reachable == undefined) reachable = this.treeChanges.reachabilityChange(node); if (reachable === Movement.STAYED_OUT) return; this.matchabilityChange(node); if (reachable === Movement.ENTERED) { this.entered.push(node) } else if (reachable === Movement.EXITED) { this.exited.push(node); this.ensureHasOldPreviousSiblingIfNeeded(node) } else if (reachable === Movement.STAYED_IN) { var movement = Movement.STAYED_IN; if (change && change.childList) { if (change.oldParentNode !== node.parentNode) { movement = Movement.REPARENTED; this.ensureHasOldPreviousSiblingIfNeeded(node) } else if (this.calcReordered && this.wasReordered(node)) { movement = Movement.REORDERED } } this.stayedIn.set(node, movement) } if (reachable === Movement.STAYED_IN) return; for (var child = node.firstChild; child; child = child.nextSibling) { this.visitNode(child, reachable) } }; MutationProjection.prototype.ensureHasOldPreviousSiblingIfNeeded = function (node) { if (!this.calcOldPreviousSibling) return; this.processChildlistChanges(); var parentNode = node.parentNode; var nodeChange = this.treeChanges.get(node); if (nodeChange && nodeChange.oldParentNode) parentNode = nodeChange.oldParentNode; var change = this.childListChangeMap.get(parentNode); if (!change) { change = new ChildListChange(); this.childListChangeMap.set(parentNode, change) } if (!change.oldPrevious.has(node)) { change.oldPrevious.set(node, node.previousSibling) } }; MutationProjection.prototype.getChanged = function (summary, selectors, characterDataOnly) { this.selectors = selectors; this.characterDataOnly = characterDataOnly; for (var i = 0; i < this.entered.length; i++) { var node = this.entered[i]; var matchable = this.matchabilityChange(node); if (matchable === Movement.ENTERED || matchable === Movement.STAYED_IN) summary.added.push(node) } var stayedInNodes = this.stayedIn.keys(); for (var i = 0; i < stayedInNodes.length; i++) { var node = stayedInNodes[i]; var matchable = this.matchabilityChange(node); if (matchable === Movement.ENTERED) { summary.added.push(node) } else if (matchable === Movement.EXITED) { summary.removed.push(node) } else if (matchable === Movement.STAYED_IN && (summary.reparented || summary.reordered)) { var movement = this.stayedIn.get(node); if (summary.reparented && movement === Movement.REPARENTED) summary.reparented.push(node); else if (summary.reordered && movement === Movement.REORDERED) summary.reordered.push(node) } } for (var i = 0; i < this.exited.length; i++) { var node = this.exited[i]; var matchable = this.matchabilityChange(node); if (matchable === Movement.EXITED || matchable === Movement.STAYED_IN) summary.removed.push(node) } }; MutationProjection.prototype.getOldParentNode = function (node) { var change = this.treeChanges.get(node); if (change && change.childList) return change.oldParentNode ? change.oldParentNode : null; var reachabilityChange = this.treeChanges.reachabilityChange(node); if (reachabilityChange === Movement.STAYED_OUT || reachabilityChange === Movement.ENTERED) throw Error('getOldParentNode requested on invalid node.'); return node.parentNode }; MutationProjection.prototype.getOldPreviousSibling = function (node) { var parentNode = node.parentNode; var nodeChange = this.treeChanges.get(node); if (nodeChange && nodeChange.oldParentNode) parentNode = nodeChange.oldParentNode; var change = this.childListChangeMap.get(parentNode); if (!change) throw Error('getOldPreviousSibling requested on invalid node.'); return change.oldPrevious.get(node) }; MutationProjection.prototype.getOldAttribute = function (element, attrName) { var change = this.treeChanges.get(element); if (!change || !change.attributes) throw Error('getOldAttribute requested on invalid node.'); var value = change.getAttributeOldValue(attrName); if (value === undefined) throw Error('getOldAttribute requested for unchanged attribute name.'); return value }; MutationProjection.prototype.attributeChangedNodes = function (includeAttributes) { if (!this.treeChanges.anyAttributesChanged) return {}; var attributeFilter; var caseInsensitiveFilter; if (includeAttributes) { attributeFilter = {}; caseInsensitiveFilter = {}; for (var i = 0; i < includeAttributes.length; i++) { var attrName = includeAttributes[i]; attributeFilter[attrName] = true; caseInsensitiveFilter[attrName.toLowerCase()] = attrName } } var result = {}; var nodes = this.treeChanges.keys(); for (var i = 0; i < nodes.length; i++) { var node = nodes[i]; var change = this.treeChanges.get(node); if (!change.attributes) continue; if (Movement.STAYED_IN !== this.treeChanges.reachabilityChange(node) || Movement.STAYED_IN !== this.matchabilityChange(node)) { continue } var element = node; var changedAttrNames = change.getAttributeNamesMutated(); for (var j = 0; j < changedAttrNames.length; j++) { var attrName = changedAttrNames[j]; if (attributeFilter && !attributeFilter[attrName] && !(change.isCaseInsensitive && caseInsensitiveFilter[attrName])) { continue } var oldValue = change.getAttributeOldValue(attrName); if (oldValue === element.getAttribute(attrName)) continue; if (caseInsensitiveFilter && change.isCaseInsensitive) attrName = caseInsensitiveFilter[attrName]; result[attrName] = result[attrName] || []; result[attrName].push(element) } } return result }; MutationProjection.prototype.getOldCharacterData = function (node) { var change = this.treeChanges.get(node); if (!change || !change.characterData) throw Error('getOldCharacterData requested on invalid node.'); return change.characterDataOldValue }; MutationProjection.prototype.getCharacterDataChanged = function () { if (!this.treeChanges.anyCharacterDataChanged) return []; var nodes = this.treeChanges.keys(); var result = []; for (var i = 0; i < nodes.length; i++) { var target = nodes[i]; if (Movement.STAYED_IN !== this.treeChanges.reachabilityChange(target)) continue; var change = this.treeChanges.get(target); if (!change.characterData || target.textContent == change.characterDataOldValue) continue; result.push(target) } return result }; MutationProjection.prototype.computeMatchabilityChange = function (selector, el) { if (!this.matchCache) this.matchCache = []; if (!this.matchCache[selector.uid]) this.matchCache[selector.uid] = new NodeMap(); var cache = this.matchCache[selector.uid]; var result = cache.get(el); if (result === undefined) { result = selector.matchabilityChange(el, this.treeChanges.get(el)); cache.set(el, result) } return result }; MutationProjection.prototype.matchabilityChange = function (node) { var _46 = this; if (this.characterDataOnly) { switch (node.nodeType) { case 8: case 3: return Movement.STAYED_IN; default: return Movement.STAYED_OUT } } if (!this.selectors) return Movement.STAYED_IN; if (node.nodeType !== 1) return Movement.STAYED_OUT; var el = node; var matchChanges = this.selectors.map(function (selector) { return _46.computeMatchabilityChange(selector, el) }); var accum = Movement.STAYED_OUT; var i = 0; while (accum !== Movement.STAYED_IN && i < matchChanges.length) { switch (matchChanges[i]) { case Movement.STAYED_IN: accum = Movement.STAYED_IN; break; case Movement.ENTERED: if (accum === Movement.EXITED) accum = Movement.STAYED_IN; else accum = Movement.ENTERED; break; case Movement.EXITED: if (accum === Movement.ENTERED) accum = Movement.STAYED_IN; else accum = Movement.EXITED; break }i++ } return accum }; MutationProjection.prototype.getChildlistChange = function (el) { var change = this.childListChangeMap.get(el); if (!change) { change = new ChildListChange(); this.childListChangeMap.set(el, change) } return change }; MutationProjection.prototype.processChildlistChanges = function () { if (this.childListChangeMap) return; this.childListChangeMap = new NodeMap(); for (var i = 0; i < this.mutations.length; i++) { var mutation = this.mutations[i]; if (mutation.type != 'childList') continue; if (this.treeChanges.reachabilityChange(mutation.target) !== Movement.STAYED_IN && !this.calcOldPreviousSibling) continue; var change = this.getChildlistChange(mutation.target); var oldPrevious = mutation.previousSibling; function recordOldPrevious(node, previous) { if (!node || change.oldPrevious.has(node) || change.added.has(node) || change.maybeMoved.has(node)) return; if (previous && (change.added.has(previous) || change.maybeMoved.has(previous))) return; change.oldPrevious.set(node, previous) } for (var j = 0; j < mutation.removedNodes.length; j++) { var node = mutation.removedNodes[j]; recordOldPrevious(node, oldPrevious); if (change.added.has(node)) { change.added.deleteNode(node) } else { change.removed.set(node, true); change.maybeMoved.deleteNode(node) } oldPrevious = node } recordOldPrevious(mutation.nextSibling, oldPrevious); for (var j = 0; j < mutation.addedNodes.length; j++) { var node = mutation.addedNodes[j]; if (change.removed.has(node)) { change.removed.deleteNode(node); change.maybeMoved.set(node, true) } else { change.added.set(node, true) } } } }; MutationProjection.prototype.wasReordered = function (node) { if (!this.treeChanges.anyParentsChanged) return false; this.processChildlistChanges(); var parentNode = node.parentNode; var nodeChange = this.treeChanges.get(node); if (nodeChange && nodeChange.oldParentNode) parentNode = nodeChange.oldParentNode; var change = this.childListChangeMap.get(parentNode); if (!change) return false; if (change.moved) return change.moved.get(node); change.moved = new NodeMap(); var pendingMoveDecision = new NodeMap(); function isMoved(node) { if (!node) return false; if (!change.maybeMoved.has(node)) return false; var didMove = change.moved.get(node); if (didMove !== undefined) return didMove; if (pendingMoveDecision.has(node)) { didMove = true } else { pendingMoveDecision.set(node, true); didMove = getPrevious(node) !== getOldPrevious(node) } if (pendingMoveDecision.has(node)) { pendingMoveDecision.deleteNode(node); change.moved.set(node, didMove) } else { didMove = change.moved.get(node) } return didMove } var oldPreviousCache = new NodeMap(); function getOldPrevious(node) { var oldPrevious = oldPreviousCache.get(node); if (oldPrevious !== undefined) return oldPrevious; oldPrevious = change.oldPrevious.get(node); while (oldPrevious && (change.removed.has(oldPrevious) || isMoved(oldPrevious))) { oldPrevious = getOldPrevious(oldPrevious) } if (oldPrevious === undefined) oldPrevious = node.previousSibling; oldPreviousCache.set(node, oldPrevious); return oldPrevious } var previousCache = new NodeMap(); function getPrevious(node) { if (previousCache.has(node)) return previousCache.get(node); var previous = node.previousSibling; while (previous && (change.added.has(previous) || isMoved(previous))) previous = previous.previousSibling; previousCache.set(node, previous); return previous } change.maybeMoved.keys().forEach(isMoved); return change.moved.get(node) }; return MutationProjection })(); var Summary = (function () { function Summary(projection, query) { var _46 = this; this.projection = projection; this.added = []; this.removed = []; this.reparented = query.all || query.element || query.characterData ? [] : undefined; this.reordered = query.all ? [] : undefined; projection.getChanged(this, query.elementFilter, query.characterData); if (query.all || query.attribute || query.attributeList) { var filter = query.attribute ? [query.attribute] : query.attributeList; var attributeChanged = projection.attributeChangedNodes(filter); if (query.attribute) { this.valueChanged = attributeChanged[query.attribute] || [] } else { this.attributeChanged = attributeChanged; if (query.attributeList) { query.attributeList.forEach(function (attrName) { if (!_46.attributeChanged.hasOwnProperty(attrName)) _46.attributeChanged[attrName] = [] }) } } } if (query.all || query.characterData) { var characterDataChanged = projection.getCharacterDataChanged(); if (query.characterData) this.valueChanged = characterDataChanged; else this.characterDataChanged = characterDataChanged } if (this.reordered) this.getOldPreviousSibling = projection.getOldPreviousSibling.bind(projection) } Summary.prototype.getOldParentNode = function (node) { return this.projection.getOldParentNode(node) }; Summary.prototype.getOldAttribute = function (node, name) { return this.projection.getOldAttribute(node, name) }; Summary.prototype.getOldCharacterData = function (node) { return this.projection.getOldCharacterData(node) }; Summary.prototype.getOldPreviousSibling = function (node) { return this.projection.getOldPreviousSibling(node) }; return Summary })(); var validNameInitialChar = /[a-zA-Z_]+/; var validNameNonInitialChar = /[a-zA-Z0-9_\-]+/; function escapeQuotes(value) { return '"' + value.replace(/"/, '\\\"') + '"' } var Qualifier = (function () { function Qualifier() { } Qualifier.prototype.matches = function (oldValue) { if (oldValue === null) return false; if (this.attrValue === undefined) return true; if (!this.contains) return this.attrValue == oldValue; var tokens = oldValue.split(' '); for (var i = 0; i < tokens.length; i++) { if (this.attrValue === tokens[i]) return true } return false }; Qualifier.prototype.toString = function () { if (this.attrName === 'class' && this.contains) return '.' + this.attrValue; if (this.attrName === 'id' && !this.contains) return '#' + this.attrValue; if (this.contains) return '[' + this.attrName + '~=' + escapeQuotes(this.attrValue) + ']'; if ('attrValue' in this) return '[' + this.attrName + '=' + escapeQuotes(this.attrValue) + ']'; return '[' + this.attrName + ']' }; return Qualifier })(); var Selector = (function () { function Selector() { this.uid = Selector.nextUid++; this.qualifiers = [] } try { Object.defineProperty(Selector.prototype, 'caseInsensitiveTagName', { get: function () { return this.tagName.toUpperCase() }, enumerable: true, configurable: true }); Object.defineProperty(Selector.prototype, 'selectorString', { get: function () { return this.tagName + this.qualifiers.join('') }, enumerable: true, configurable: true }) } catch (e) { }; Selector.prototype.isMatching = function (el) { return el[Selector.matchesSelector](this.selectorString) }; Selector.prototype.wasMatching = function (el, change, isMatching) { if (!change || !change.attributes) return isMatching; var tagName = change.isCaseInsensitive ? this.caseInsensitiveTagName : this.tagName; if (tagName !== '*' && tagName !== el.tagName) return false; var attributeOldValues = []; var anyChanged = false; for (var i = 0; i < this.qualifiers.length; i++) { var qualifier = this.qualifiers[i]; var oldValue = change.getAttributeOldValue(qualifier.attrName); attributeOldValues.push(oldValue); anyChanged = anyChanged || (oldValue !== undefined) } if (!anyChanged) return isMatching; for (var i = 0; i < this.qualifiers.length; i++) { var qualifier = this.qualifiers[i]; var oldValue = attributeOldValues[i]; if (oldValue === undefined) oldValue = el.getAttribute(qualifier.attrName); if (!qualifier.matches(oldValue)) return false } return true }; Selector.prototype.matchabilityChange = function (el, change) { var isMatching = this.isMatching(el); if (isMatching) return this.wasMatching(el, change, isMatching) ? Movement.STAYED_IN : Movement.ENTERED; else return this.wasMatching(el, change, isMatching) ? Movement.EXITED : Movement.STAYED_OUT }; Selector.parseSelectors = function (input) { var selectors = []; var currentSelector; var currentQualifier; function newSelector() { if (currentSelector) { if (currentQualifier) { currentSelector.qualifiers.push(currentQualifier); currentQualifier = undefined } selectors.push(currentSelector) } currentSelector = new Selector() } function newQualifier() { if (currentQualifier) currentSelector.qualifiers.push(currentQualifier); currentQualifier = new Qualifier() } var WHITESPACE = /\s/; var valueQuoteChar; var SYNTAX_ERROR = 'Invalid or unsupported selector syntax.'; var SELECTOR = 1; var TAG_NAME = 2; var QUALIFIER = 3; var QUALIFIER_NAME_FIRST_CHAR = 4; var QUALIFIER_NAME = 5; var ATTR_NAME_FIRST_CHAR = 6; var ATTR_NAME = 7; var EQUIV_OR_ATTR_QUAL_END = 8; var EQUAL = 9; var ATTR_QUAL_END = 10; var VALUE_FIRST_CHAR = 11; var VALUE = 12; var QUOTED_VALUE = 13; var SELECTOR_SEPARATOR = 14; var state = SELECTOR; var i = 0; while (i < input.length) { var c = input[i++]; switch (state) { case SELECTOR: if (c.match(validNameInitialChar)) { newSelector(); currentSelector.tagName = c; state = TAG_NAME; break } if (c == '*') { newSelector(); currentSelector.tagName = '*'; state = QUALIFIER; break } if (c == '.') { newSelector(); newQualifier(); currentSelector.tagName = '*'; currentQualifier.attrName = 'class'; currentQualifier.contains = true; state = QUALIFIER_NAME_FIRST_CHAR; break } if (c == '#') { newSelector(); newQualifier(); currentSelector.tagName = '*'; currentQualifier.attrName = 'id'; state = QUALIFIER_NAME_FIRST_CHAR; break } if (c == '[') { newSelector(); newQualifier(); currentSelector.tagName = '*'; currentQualifier.attrName = ''; state = ATTR_NAME_FIRST_CHAR; break } if (c.match(WHITESPACE)) break; throw Error(SYNTAX_ERROR); case TAG_NAME: if (c.match(validNameNonInitialChar)) { currentSelector.tagName += c; break } if (c == '.') { newQualifier(); currentQualifier.attrName = 'class'; currentQualifier.contains = true; state = QUALIFIER_NAME_FIRST_CHAR; break } if (c == '#') { newQualifier(); currentQualifier.attrName = 'id'; state = QUALIFIER_NAME_FIRST_CHAR; break } if (c == '[') { newQualifier(); currentQualifier.attrName = ''; state = ATTR_NAME_FIRST_CHAR; break } if (c.match(WHITESPACE)) { state = SELECTOR_SEPARATOR; break } if (c == ',') { state = SELECTOR; break } throw Error(SYNTAX_ERROR); case QUALIFIER: if (c == '.') { newQualifier(); currentQualifier.attrName = 'class'; currentQualifier.contains = true; state = QUALIFIER_NAME_FIRST_CHAR; break } if (c == '#') { newQualifier(); currentQualifier.attrName = 'id'; state = QUALIFIER_NAME_FIRST_CHAR; break } if (c == '[') { newQualifier(); currentQualifier.attrName = ''; state = ATTR_NAME_FIRST_CHAR; break } if (c.match(WHITESPACE)) { state = SELECTOR_SEPARATOR; break } if (c == ',') { state = SELECTOR; break } throw Error(SYNTAX_ERROR); case QUALIFIER_NAME_FIRST_CHAR: if (c.match(validNameInitialChar)) { currentQualifier.attrValue = c; state = QUALIFIER_NAME; break } throw Error(SYNTAX_ERROR); case QUALIFIER_NAME: if (c.match(validNameNonInitialChar)) { currentQualifier.attrValue += c; break } if (c == '.') { newQualifier(); currentQualifier.attrName = 'class'; currentQualifier.contains = true; state = QUALIFIER_NAME_FIRST_CHAR; break } if (c == '#') { newQualifier(); currentQualifier.attrName = 'id'; state = QUALIFIER_NAME_FIRST_CHAR; break } if (c == '[') { newQualifier(); state = ATTR_NAME_FIRST_CHAR; break } if (c.match(WHITESPACE)) { state = SELECTOR_SEPARATOR; break } if (c == ',') { state = SELECTOR; break } throw Error(SYNTAX_ERROR); case ATTR_NAME_FIRST_CHAR: if (c.match(validNameInitialChar)) { currentQualifier.attrName = c; state = ATTR_NAME; break } if (c.match(WHITESPACE)) break; throw Error(SYNTAX_ERROR); case ATTR_NAME: if (c.match(validNameNonInitialChar)) { currentQualifier.attrName += c; break } if (c.match(WHITESPACE)) { state = EQUIV_OR_ATTR_QUAL_END; break } if (c == '~') { currentQualifier.contains = true; state = EQUAL; break } if (c == '=') { currentQualifier.attrValue = ''; state = VALUE_FIRST_CHAR; break } if (c == ']') { state = QUALIFIER; break } throw Error(SYNTAX_ERROR); case EQUIV_OR_ATTR_QUAL_END: if (c == '~') { currentQualifier.contains = true; state = EQUAL; break } if (c == '=') { currentQualifier.attrValue = ''; state = VALUE_FIRST_CHAR; break } if (c == ']') { state = QUALIFIER; break } if (c.match(WHITESPACE)) break; throw Error(SYNTAX_ERROR); case EQUAL: if (c == '=') { currentQualifier.attrValue = ''; state = VALUE_FIRST_CHAR; break } throw Error(SYNTAX_ERROR); case ATTR_QUAL_END: if (c == ']') { state = QUALIFIER; break } if (c.match(WHITESPACE)) break; throw Error(SYNTAX_ERROR); case VALUE_FIRST_CHAR: if (c.match(WHITESPACE)) break; if (c == '"' || c == "'") { valueQuoteChar = c; state = QUOTED_VALUE; break } currentQualifier.attrValue += c; state = VALUE; break; case VALUE: if (c.match(WHITESPACE)) { state = ATTR_QUAL_END; break } if (c == ']') { state = QUALIFIER; break } if (c == "'" || c == '"') throw Error(SYNTAX_ERROR); currentQualifier.attrValue += c; break; case QUOTED_VALUE: if (c == valueQuoteChar) { state = ATTR_QUAL_END; break } currentQualifier.attrValue += c; break; case SELECTOR_SEPARATOR: if (c.match(WHITESPACE)) break; if (c == ',') { state = SELECTOR; break } throw Error(SYNTAX_ERROR) } } switch (state) { case SELECTOR: case TAG_NAME: case QUALIFIER: case QUALIFIER_NAME: case SELECTOR_SEPARATOR: newSelector(); break; default: throw Error(SYNTAX_ERROR) }if (!selectors.length) throw Error(SYNTAX_ERROR); return selectors }; Selector.nextUid = 1; Selector.matchesSelector = (function () { var element = _9.createElement('div'); if (typeof element['webkitMatchesSelector'] === 'function') return 'webkitMatchesSelector'; if (typeof element['mozMatchesSelector'] === 'function') return 'mozMatchesSelector'; if (typeof element['msMatchesSelector'] === 'function') return 'msMatchesSelector'; return 'matchesSelector' })(); return Selector })(); var attributeFilterPattern = /^([a-zA-Z:_]+[a-zA-Z0-9_\-:\.]*)$/; function validateAttribute(attribute) { if (typeof attribute != 'string') throw Error('Invalid request opion. attribute must be a non-zero length string.'); attribute = attribute.trim(); if (!attribute) throw Error('Invalid request opion. attribute must be a non-zero length string.'); if (!attribute.match(attributeFilterPattern)) throw Error('Invalid request option. invalid attribute name: ' + attribute); return attribute } function validateElementAttributes(attribs) { if (!attribs.trim().length) throw Error('Invalid request option: elementAttributes must contain at least one attribute.'); var lowerAttributes = {}; var attributes = {}; var tokens = attribs.split(/\s+/); for (var i = 0; i < tokens.length; i++) { var name = tokens[i]; if (!name) continue; var name = validateAttribute(name); var nameLower = name.toLowerCase(); if (lowerAttributes[nameLower]) throw Error('Invalid request option: observing multiple case variations of the same attribute is not supported.'); attributes[name] = true; lowerAttributes[nameLower] = true } return Object.keys(attributes) } function elementFilterAttributes(selectors) { var attributes = {}; selectors.forEach(function (selector) { selector.qualifiers.forEach(function (qualifier) { attributes[qualifier.attrName] = true }) }); return Object.keys(attributes) } var MutationSummary = (function () { function MutationSummary(opts) { var _46 = this; this.connected = false; this.options = MutationSummary.validateOptions(opts); this.observerOptions = MutationSummary.createObserverOptions(this.options.queries); this.root = this.options.rootNode; this.callback = this.options.callback; this.elementFilter = Array.prototype.concat.apply([], this.options.queries.map(function (query) { return query.elementFilter ? query.elementFilter : [] })); if (!this.elementFilter.length) this.elementFilter = undefined; this.calcReordered = this.options.queries.some(function (query) { return query.all }); this.queryValidators = []; if (MutationSummary.createQueryValidator) { this.queryValidators = this.options.queries.map(function (query) { return MutationSummary.createQueryValidator(_46.root, query) }) } this.observer = MutationObserverCtor ? new MutationObserverCtor(function (mutations) { _46.observerCallback(mutations) }) : { observe: function () { } }; this.reconnect() } MutationSummary.createObserverOptions = function (queries) { var observerOptions = { childList: true, subtree: true }; var attributeFilter; function observeAttributes(attributes) { if (observerOptions.attributes && !attributeFilter) return; observerOptions.attributes = true; observerOptions.attributeOldValue = true; if (!attributes) { attributeFilter = undefined; return } attributeFilter = attributeFilter || {}; attributes.forEach(function (attribute) { attributeFilter[attribute] = true; attributeFilter[attribute.toLowerCase()] = true }) } queries.forEach(function (query) { if (query.characterData) { observerOptions.characterData = true; observerOptions.characterDataOldValue = true; return } if (query.all) { observeAttributes(); observerOptions.characterData = true; observerOptions.characterDataOldValue = true; return } if (query.attribute) { observeAttributes([query.attribute.trim()]); return } var attributes = elementFilterAttributes(query.elementFilter).concat(query.attributeList || []); if (attributes.length) observeAttributes(attributes) }); if (attributeFilter) observerOptions.attributeFilter = Object.keys(attributeFilter); return observerOptions }; MutationSummary.validateOptions = function (options) { for (var prop in options) { if (!(prop in MutationSummary.optionKeys)) throw Error('Invalid option: ' + prop) } if (typeof options.callback !== 'function') throw Error('Invalid options: callback is required and must be a function'); if (!options.queries || !options.queries.length) throw Error('Invalid options: queries must contain at least one query request object.'); var opts = { callback: options.callback, rootNode: options.rootNode || _9, observeOwnChanges: !!options.observeOwnChanges, oldPreviousSibling: !!options.oldPreviousSibling, queries: [] }; for (var i = 0; i < options.queries.length; i++) { var request = options.queries[i]; if (request.all) { if (Object.keys(request).length > 1) throw Error('Invalid request option. all has no options.'); opts.queries.push({ all: true }); continue } if ('attribute' in request) { var query = { attribute: validateAttribute(request.attribute) }; query.elementFilter = Selector.parseSelectors('*[' + query.attribute + ']'); if (Object.keys(request).length > 1) throw Error('Invalid request option. attribute has no options.'); opts.queries.push(query); continue } if ('element' in request) { var requestOptionCount = Object.keys(request).length; var query = { element: request.element, elementFilter: Selector.parseSelectors(request.element) }; if (request.hasOwnProperty('elementAttributes')) { query.attributeList = validateElementAttributes(request.elementAttributes); requestOptionCount-- } if (requestOptionCount > 1) throw Error('Invalid request option. element only allows elementAttributes option.'); opts.queries.push(query); continue } if (request.characterData) { if (Object.keys(request).length > 1) throw Error('Invalid request option. characterData has no options.'); opts.queries.push({ characterData: true }); continue } throw Error('Invalid request option. Unknown query request.') } return opts }; MutationSummary.prototype.createSummaries = function (mutations) { if (!mutations || !mutations.length) return []; var projection = new MutationProjection(this.root, mutations, this.elementFilter, this.calcReordered, this.options.oldPreviousSibling); var summaries = []; for (var i = 0; i < this.options.queries.length; i++) { summaries.push(new Summary(projection, this.options.queries[i])) } return summaries }; MutationSummary.prototype.checkpointQueryValidators = function () { this.queryValidators.forEach(function (validator) { if (validator) validator.recordPreviousState() }) }; MutationSummary.prototype.runQueryValidators = function (summaries) { this.queryValidators.forEach(function (validator, index) { if (validator) validator.validate(summaries[index]) }) }; MutationSummary.prototype.changesToReport = function (summaries) { return summaries.some(function (summary) { var summaryProps = ['added', 'removed', 'reordered', 'reparented', 'valueChanged', 'characterDataChanged']; if (summaryProps.some(function (prop) { return summary[prop] && summary[prop].length })) return true; if (summary.attributeChanged) { var attrNames = Object.keys(summary.attributeChanged); var attrsChanged = attrNames.some(function (attrName) { return !!summary.attributeChanged[attrName].length }); if (attrsChanged) return true } return false }) }; MutationSummary.prototype.observerCallback = function (mutations) { if (!this.options.observeOwnChanges) this.observer.disconnect(); var summaries = this.createSummaries(mutations); this.runQueryValidators(summaries); if (this.options.observeOwnChanges) this.checkpointQueryValidators(); if (this.changesToReport(summaries)) this.callback(summaries); if (!this.options.observeOwnChanges && this.connected) { this.checkpointQueryValidators(); this.observer.observe(this.root, this.observerOptions) } }; MutationSummary.prototype.reconnect = function () { if (this.connected) throw Error('Already connected'); this.observer.observe(this.root, this.observerOptions); this.connected = true; this.checkpointQueryValidators() }; MutationSummary.prototype.takeSummaries = function () { if (!this.connected) throw Error('Not connected'); var summaries = this.createSummaries(this.observer.takeRecords()); return this.changesToReport(summaries) ? summaries : undefined }; MutationSummary.prototype.disconnect = function () { var summaries = this.takeSummaries(); this.observer.disconnect(); this.connected = false; return summaries }; MutationSummary.NodeMap = NodeMap; MutationSummary.parseElementFilter = Selector.parseSelectors; MutationSummary.optionKeys = { 'callback': true, 'queries': true, 'rootNode': true, 'oldPreviousSibling': true, 'observeOwnChanges': true }; return MutationSummary })(); var TreeMirrorClient = (function () { function TreeMirrorClient(target, mirror, testingQueries) { var _46 = this; this.target = target; this.mirror = mirror; this.nextId = 1; this.knownNodes = new MutationSummary.NodeMap(); _362(); _360(); var rootId = this.serializeNode(target).id; var children = []; for (var child = target.firstChild; child; child = child.nextSibling) { var serializedChild = this.serializeNode(child, true); if (serializedChild) children.push(serializedChild) } this.mirror.initialize(rootId, children); var self = this; var queries = [{ all: true }]; if (testingQueries) queries = queries.concat(testingQueries); this.mutationSummary = new MutationSummary({ rootNode: target, callback: function (summaries) { _46.applyChanged(summaries) }, queries: queries }) } TreeMirrorClient.prototype.disconnect = function () { if (this.mutationSummary) { this.mutationSummary.disconnect(); this.mutationSummary = undefined } }; TreeMirrorClient.prototype.rememberNode = function (node) { var id = this.nextId++; this.knownNodes.set(node, id); return id }; TreeMirrorClient.prototype.forgetNode = function (node) { this.knownNodes.deleteNode(node) }; TreeMirrorClient.prototype.serializeNode = function (node, isInitial) { if (node === null || _171(node, 'no-mouseflow-dom')) return null; if (_171(node, _262)) return null; var id = this.knownNodes.get(node); if (id !== undefined) { if (isInitial) return _10('Found duplicated node during initial DOM: ' + id); return { id: id } } var data = { nodeType: node.nodeType, id: this.rememberNode(node) }; if (_8._139(node, 'data-mf-replace') || _8._139(node, 'data-mf-replace-inner')) return null; var _526 = _600(node), _528 = !!_171(node.parentNode, _262); if (_526 || _528) { _10('CSS Blacklist blocked node. NodeType: ' + node.nodeType + '. ' + (node.nodeType === 1 ? 'Tag: ' + node.tagName : '')); _170(node, _262, true); if (isInitial && node.childNodes.length) { var _74; for (_74 = node.firstChild; _74; _74 = _74.nextSibling)this.serializeNode(_74, true) } if (_528) return null } if (isInitial) { if (_171(node.parentNode, 'no-mouseflow-dom') || _8._130(node, 'no-mouseflow-dom')) _170(node, 'no-mouseflow-dom', 'initial') } else if (_171(node.parentNode, 'no-mouseflow-dom')) { _170(node, 'no-mouseflow-dom', 'inherit'); return null } switch (data.nodeType) { case 10: data.name = node.name; data.publicId = node.publicId; data.systemId = node.systemId; break; case 8: case 3: if (node.nodeType === 8 && node.textContent.indexOf('[if') !== 0 && node.textContent.indexOf('<![endif]') !== 0) break; data.textContent = _475(node).replace(_661, ' '); if (node.parentNode && node.parentNode.tagName === 'STYLE' && /^\s*$/.test(node.textContent)) { data.textContent = _366(node.parentNode) } break; case 1: if (node.tagName === 'IFRAME' && node.parentNode && node.parentNode.tagName === 'HEAD') { data.nodeType = 8; data.textContent = ''; break } data.tagName = node.tagName; if (node.attributes['data-mf-replace']) { var _237 = node.attributes['data-mf-replace'].value; data = _517.call(this, _237, function (_27) { var _13 = this.serializeNode(_27, true); _13.id = data.id; this.knownNodes.set(_27, _13.id); return _13 })[0]; break } if (node.tagName === 'SCRIPT') break; data.attributes = {}; if (_526) { var _525 = _582(node); if (node.id) data.attributes.id = node.id; if (node.name) data.attributes.name = node.name; data.attributes.style = (node.style ? node.style.cssText + '; ' : '') + 'width: ' + _525.width + 'px; height: ' + _525.height + 'px;' + (_3.getComputedStyle(node).display === 'inline' ? ' display: inline-block;' : ''); data.attributes.class = node.className + ' mf-excluded'; break } for (var i = 0; i < node.attributes.length; i++) { var attr = node.attributes[i]; if (_655(attr.name.toLowerCase())) continue; if (attr.name.toLowerCase() === 'value' && node.tagName === 'INPUT') data.attributes.value = _176(node); else data.attributes[attr.name] = attr.value } if (node.tagName === 'IFRAME' && node.offsetWidth <= 1 && node.offsetHeight <= 1) data.attributes.src = ''; if (isInitial && node.tagName === 'INPUT') { if (!data.attributes.value && node.value) data.attributes.value = _176(node); if (!data.attributes.checked && node.checked) data.attributes.checked = node.checked } if (isInitial && node.tagName === 'OPTION' && !data.attributes.selected && node.selected) data.attributes.selected = node.selected; if (node.tagName === 'INPUT' && node.type === 'hidden' && data.attributes.value) data.attributes.value = ''; if (node.attributes['data-mf-replace-inner']) { var _237 = node.attributes['data-mf-replace-inner'].value; data.childNodes = _517.call(this, _237, function (_27) { return this.serializeNode(_27, true) }); break } if (isInitial) { if (node.childNodes.length) { data.childNodes = []; var _162 = false; for (var child = node.firstChild; child; child = child.nextSibling) { if (_533(child)) _162 = true; else if (_549(child.previousSibling)) _162 = false; if (_162) continue; var serializedChild = this.serializeNode(child, true); if (serializedChild) { data.childNodes.push(serializedChild) } } } var _289 = node.tagName === 'LINK' && node.href && (node.href.indexOf('blob:') === 0 || _14.enableCssRecording); if (_289) { try { var _ = node.sheet.cssRules } catch (e) { _289 = false } } var _660 = node.tagName === 'STYLE' && !node.textContent; if (_289) { data.tagName = 'STYLE'; data.href = undefined; data.rel = undefined } if (_289 || _660) { data.childNodes = [{ nodeType: 3, textContent: _366(node) }] } } break }return data }; TreeMirrorClient.prototype.serializeAddedAndMoved = function (added, reparented, reordered) { var _46 = this; var all = added.concat(reparented).concat(reordered); var parentMap = new MutationSummary.NodeMap(); all.forEach(function (node) { var parent = node.parentNode; var children = parentMap.get(parent); if (!children) { children = new MutationSummary.NodeMap(); parentMap.set(parent, children) } children.set(node, true) }); var moved = []; var noMouseflowDom = []; parentMap.keys().forEach(function (parent) { var children = parentMap.get(parent); var keys = children.keys(); while (keys.length) { var node = keys[0]; while (node.previousSibling && children.has(node.previousSibling)) node = node.previousSibling; var _162 = false; while (node && children.has(node)) { if (_533(node)) _162 = true; else if (_549(node.previousSibling)) _162 = false; if (!_162) { var data = _46.serializeNode(node); if (data) { var _301 = node.previousSibling; while (_301 && !data.previousSibling) { data.previousSibling = _46.serializeNode(_301); _301 = _301.previousSibling } data.parentNode = _46.serializeNode(node.parentNode); if (data.parentNode) moved.push(data) } if (_8._130(node, 'no-mouseflow-dom')) noMouseflowDom.push(node) } children.deleteNode(node); node = node.nextSibling } var keys = children.keys() } }); noMouseflowDom.forEach(function (node) { _170(node, 'no-mouseflow-dom', 'initial', true) }); return moved }; TreeMirrorClient.prototype.serializeAttributeChanges = function (attributeChanged) { var _46 = this; var map = new MutationSummary.NodeMap(); Object.keys(attributeChanged).forEach(function (attrName) { attributeChanged[attrName].forEach(function (element) { if (element.hasAttribute('data-mf-replace') || _8._139(element, 'data-mf-replace') || _8._139(element, 'data-mf-replace-inner')) { return } if (_8._130(element, 'no-mouseflow-dom')) _170(element, 'no-mouseflow-dom', 'initial', true); var record = map.get(element); if (!record) { record = _46.serializeNode(element); if (record) { record.attributes = {}; map.set(element, record) } } if (record) { if (attrName.toLowerCase() === 'value' && element.tagName === 'INPUT') record.attributes.value = _176(element); else record.attributes[attrName] = element.getAttribute(attrName) } }) }); return map.keys().map(function (node) { return map.get(node) }) }; TreeMirrorClient.prototype.serializeTextChanges = function (textChanges) { var _46 = this; return textChanges.map(function (node) { var data = _46.serializeNode(node); if (data) data.textContent = _475(node); return data }) }; TreeMirrorClient.prototype.applyChanged = function (summaries) { _362(); _360(); var summary = summaries[0]; var _46 = this; var removed = summary.removed.map(function (node) { return _46.serializeNode(node) }); var moved = this.serializeAddedAndMoved(summary.added, summary.reparented, summary.reordered); var attributes = this.serializeAttributeChanges(summary.attributeChanged); var text = this.serializeTextChanges(summary.characterDataChanged); this.mirror.applyChanged({ removed: _270(removed), addedOrMoved: _270(moved), attributes: _270(attributes), text: _270(text) }); summary.removed.forEach(function (node) { _46.forgetNode(node) }) }; return TreeMirrorClient })(); function _270(_659) { return _659.filter(function (_167) { return _167 }) } function _362() { _400 = []; if (!_218.length) return; try { var _231 = _9.querySelectorAll(_218.join(',')); for (var i = 0; i < _231.length; i++) { _400.push(_231[i]) } } catch (e) { } } function _360() { _394 = []; if (!_219.length) return; try { var _231 = _9.querySelectorAll(_219.join(',')); for (var i = 0; i < _231.length; i++) { _394.push(_231[i]) } } catch (e) { } } function _517(_237, _658) { var _13 = []; var _312 = _9.createElement('div'); _312.innerHTML = _237; for (var i = 0; i < _312.childNodes.length; i++) { var _657 = _312.childNodes[i]; var _656 = _658.call(this, _657); _13.push(_656) } return _13 } function _533(_27) { return _27 && _27.nodeType === 8 && _27.textContent.trim().toLowerCase().indexOf('mouseflowexcludestart') === 0 } function _549(_27) { return _27 && _27.nodeType === 8 && _27.textContent.trim().toLowerCase().indexOf('mouseflowexcludeend') === 0 } function _655(_342) { return _654.test(_342) } function _366(_27) { var _214 = ''; if (!_27.sheet) return _214; for (var _1 = 0; _1 < _27.sheet.cssRules.length; _1++) { _214 += _27.sheet.cssRules[_1].cssText } return _214 } function _854() { _115({ _16: _135 + 'install?websiteId=' + _45, _165: function () { _10('Website installed signal sent.') }, _85: function () { _10('Error in transmitCrossDomain - could not signal that website was installed.') } }) } function _41() { if (_67) { _10('Recording script is already started'); return } if (!_566) { _10('Recording not started - recording script is not initialized'); return } _683(); _10('Recording starting, version ' + _172 + (_14.gdprEnabled ? ', GDPR mode enabled.' : '')); if (!_670()) return; _67 = true; _673(); _362(); _360(); _11._95 = _624(_0._433); if (_633()) { _11._56 = _323(); _0._125 = []; _11._245 = 0 } var _546 = _842(); var _16 = _135 + 'init?v=' + _172 + '&p=' + _45 + '&s=' + _11._56 + '&page=' + _11._95 + '&ret=' + (_11._234 ? '1' : '0') + '&u=' + _11._143 + '&href={href}' + '&url=' + _65(_196._293()) + '&ref={referrer}' + '&title=' + _65(_9.title) + '&res=' + _3.screen.width + 'x' + _3.screen.height + '&tz=' + _627() + '&to=' + _11._524 + '&dnt=' + _11._473 + '&ori=' + (typeof _3.orientation != 'undefined' ? _3.orientation : '') + '&dw=' + _9.documentElement.clientWidth + '&dh=' + _9.documentElement.clientHeight + '&time=' + _790() + '&pxr=' + (typeof _3.devicePixelRatio != 'undefined' ? _3.devicePixelRatio : 1) + (_546.length > 0 ? '&fw=' + _546.join(',') : '') + '&gdpr=' + (_14.gdprEnabled ? 1 : 0); var _153 = _14.location.href; var _544 = _57._302 - _16.length - 6; if (_65(_153).length > _544) _153 = _153.split('#')[0]; if (_65(_153).length > _544) _153 = _153.split('?')[0]; _16 = _16.replace('{href}', _65(_153)); var _160 = _9.referrer; if (_16.replace('{referrer}', _65(_160)).length > _57._302) { if (_160.indexOf('?') > -1) _160 = _160.split('?')[0]; if (_16.replace('{referrer}', _65(_160)).length > _57._302) _160 = '' } _16 = _16.replace('{referrer}', _65(_160)); _843(); var _539 = _648(_57._302 - _16.length - 6); _16 += _646(_539); _115({ _16: _16, _165: function (_75) { if (_75._456 === 'Recording blocked') { _10('Recording not started - mf_block cookie set to 1'); return } _539.forEach(function (_114) { _592(_114.key, _114.value) }); _186 = true; _651(); _128._41(_11, _0, _332, _96, _594, _349, _10); _3._mfq = new _327(_3._mfq); _642(); _641() }, _802: true, _85: function () { _10('Error in transmitCrossDomain - recording not starting.') } }); if (_0._226) { if (_0._226 !== _110(_14.location.pathname)) _349(); _0._226 = null } _626(); _0._76 = { x: _3.pageXOffset, y: _3.pageYOffset }; if (_0._76.x !== 0 && _0._76.y !== 0) _468(); _0._241 = 1; _344(); _10('Recording started. Session: ' + _11._56 + ', Page: ' + _11._95 + ', Last page: ' + _11._409) } function _59(_653) { if (!_67) return; _350 = false; _454(); _22._151(_398); _22._151(_347); _22._151(_399); _22._116(_227); if (_201) { _22._116(_201); _423() } if (_244) { _22._116(_244); _542() } _674(); if (!_653) _24(_5._652, {}); _277(); _186 = false; try { _209.disconnect() } catch (e) { } _128._59(); _300._59(); _190._59(); _344(); _0 = _507(); _10('Recording stopped'); _67 = false; _336 = false } function _846(_28, _81) { if (typeof _28 !== 'string') _28 = (_28 || '').toString(); if (_14.liveHeatmapsEnabled) { _190._500({ url: _28 }) } if (_67) { if (!_350) { _10('New page view skipped. Current page view is not initialized yet.'); return } _59() } _14.htmlDelay = _14.newPageViewHtmlDelay; if (typeof _28 != 'undefined') _14.path = _28; if (_81) _14.location = _81; _41(); _311(0) } function _847() { _59(); _9.cookie = 'mf_' + _45 + '=; expires=Thu, 01-Jan-70 00:00:01 GMT; path=/; domain=' + _329(_81) + ';'; if (_3.name && _3.name.length === 35 && _3.name.indexOf('mf_') === 0) _3.name = '' } function _651() { if (_14.htmlFetchMode === 'post') { _22._52(function () { _663() }, _14.htmlDelay) } else { _10('Html not sent due to mouseflowHtmlFecthMode setting') } } function _663() { _209 = new TreeMirrorClient(_9, { initialize: function (rootId, children) { _350 = true; _805({ data: { f: 'initialize', args: [rootId, children] } }, _9.documentElement.innerHTML.length) }, applyChanged: function (summary) { if (_94() - _0._310 < 30000) { if (summary.removed.length || summary.addedOrMoved.length || summary.attributes.length || summary.text.length) { _807({ data: { f: 'applyChanged', args: [summary.removed, summary.addedOrMoved, summary.attributes, summary.text] } }) } } } }) } function _849(_23, _4, _650, _536) { if (!_67 || !_23) return; _4 = _4 || ''; if (!_592(_23, _4)) { _10('Variable already set to same value, not triggering callback.'); return } var _13 = { key: _23.toString(), value: _4.toString() || '', scope: _650 || 'session', overwrite: _536 === undefined ? true : _536 }; _0._111.push(_13); _22._116(_244); _244 = _22._52(_542, 1000) } function _648(limit) { if (!_3._mfq.length) return []; var _111 = []; var _535 = 0; for (var _47 = 0; _47 < _3._mfq.length; _47++) { var _43 = _3._mfq[_47]; if (!_43 || !_43.length || _43[0] !== 'setVariable') continue; if ((_43.length > 3 && _43[3] !== 'session') || (_43.length > 4 && _43[4] !== true)) continue; var _23 = _43[1]; var _4 = _43[2]; if (!_23 || !_4) continue; if (_612(_23) !== -1) continue; var _647 = _65(_23) + '=' + _65(_4); _535 += _647.length + 1; if (_535 - 1 >= limit) break; _111.push({ key: _23, value: _4 }); _3._mfq.splice(_47, 1); _47-- } return _111 } function _646(_111) { var _515 = _111.map(function (_114) { return _65(_114.key) + '=' + _65(_114.value) }).join('&'); return _515 ? '&vars=' + _65(_515) : '' } function _542() { _244 = 0; for (var _1 = 0; _1 < _0._111.length; _1++) { var _114 = _0._111[_1]; _10('Setting custom variable: ' + _114.key + ' = ' + _114.value + ', overwrite: ' + (_114.overwrite === undefined ? true : _114.overwrite)) } _332('variable', _0._111); _0._111 = [] } function _96(_645) { _24(_5._96, { target: _645 }) } function _848() { _24(_5._96, { target: '*' }) } function _850(_644) { if (_14.gdprEnabled) _10('User identification not allowed (script in GDPR mode)'); else if (!_67) _332('identify', { userId: _11._143, userName: _644 }) } function _594(_34) { if (!_67) return; _10('Registering form submit attempt on this page'); _527(_34) } function _349(_34) { if (!_67) return; var _396 = _94(); if (_0._133 || _396 > 5000) { _10('Registering form submit success on this page'); if (!_0._133) _24(_5._273, { target: _34 }); _24(_5._488, {}); _0._133 = undefined } else { _10('Registering form submit success on previous page'); _414([{ _18: _5._488 }]) } } function _851(_34) { if (!_67) return; var _396 = _94(); if (_0._133 || _396 > 5000) { _10('Registering form submit failure on this page'); if (!_0._133) _24(_5._273, { target: _34 }); _24(_5._182, {}); _140(_86._182); _0._133 = undefined } else { _10('Registering form submit failure on previous page'); _414([{ _18: _5._182 }, { _18: _5._89, _20: { x: _86._182._4, y: 0 } }, { _18: _5._96, _20: { target: _86._182._25 } }]) } } function _527(_34) { if (!_67 || !_34 || _271(_328(_34))) return; if ((+new Date()) - _0._506 < 20) return; _0._506 = +new Date(); _24(_5._273, { target: _34 }); if (!_0._382[_34]) { _0._382[_34] = _326(_34) } else { _562(_34, _326(_34), _0._382[_34]) } _685(_34); _637(_34); _0._133 = +new Date() } function _140(_89, _42) { if (!_67 || !_89) return; var _4 = +_89._4; if (!_4) return; var _25 = _89._25; if (_25) { if (_0._505.indexOf(_25) !== -1) return; _0._505.push(_25) } else { _25 = 'custom-friction' + (_89._595 ? ('-' + _89._595) : '') } var _643 = { value: _25, target: _42 ? _42 : '', x: _4 > 0 ? _4 : 0, y: _4 < 0 ? _4 * -1 : 0 }; _24(_5._89, _643) } function _642() { if (_11._84.length < 2) return; var _184 = _11._84[_11._84.length - 2]; var _230 = _11._84[_11._84.length - 1]; var _150 = _110(_14.path || _14.location.pathname); if (_184._150 === _150 && _184._150 !== _230._150 && _0._91 - _230._91 < 10000) { _414([{ _18: _5._89, _20: { x: _86._482._4, y: 0 } }, { _18: _5._96, _20: { target: _86._482._25 } }]) } } function _641() { if (_11._84.length < 4) return; var _511 = _11._84[_11._84.length - 5]; var _184 = _11._84[_11._84.length - 4]; if (_0._91 - _184._91 < 30000) { if (_511 && _184._91 - _511._91 < 30000) return; _471(_184._49, [{ _18: _5._89, _20: { x: _86._508._4, y: 0 } }, { _18: _5._96, _20: { target: _86._508._25 } }]) } } function _346() { if (!_67) return; _128._346.apply(_128, arguments) } function _640() { return { _56: '', _95: '', _143: '', _234: false, _524: +('ontouchstart' in _3 && _14.touchEvents), _473: (navigator.doNotTrack === 'yes' || navigator.doNotTrack == 1 || window.doNotTrack == 1 || navigator.msDoNotTrack == 1) ? 1 : 0, _245: 0, _409: '', _84: [], _223: [], _272: _639(), _142: null } } function _639() { try { _3.sessionStorage.setItem('mf_supportsSessionStorage', '1'); var _638 = _3.sessionStorage.getItem('mf_supportsSessionStorage') === '1'; _3.sessionStorage.removeItem('mf_supportsSessionStorage'); return _638 } catch (e) { return false } } function _507() { return { _433: new Date(), _91: +new Date(), _236: +new Date(), _384: 0, _13: [], _238: [], _35: [], _217: [], _565: [], _132: [], _107: [], _426: 0, _460: 0, _152: 0, _424: '', _506: 0, _233: [], _164: [], _203: [], _505: [], _122: { x: 0, y: 0 }, _470: { x: 0, y: 0 }, _457: { x: 0, y: 0 }, _516: -100, _76: { x: 0, y: 0 }, _239: { x: 0, y: 0 }, _198: {}, _361: -100, _356: -100, _141: { x: 0, y: 0 }, _331: [], _833: 0, _155: [], _111: [], _241: 1, _310: 0, _443: 0, _382: {}, _125: [], _451: 0, _449: 0, _447: 0, _223: [], _216: 0, _229: 0, _131: null, _108: _664(), _432: 0, _305: false, _553: _172 } } function _326(_34) { var _161 = _328(_34); var _30 = {}; if (!_161) { _10('Form not found: ' + _34); return _30 } for (var i = 0; i < _161.elements.length; i++) { var _6 = _161.elements[i]; var _25 = _6.name; if (!_25 || _25 == '') continue; if (_6.tagName && /input|select|button|textarea/.test(_6.tagName.toLowerCase()) && (!_6.type || !/hidden|submit|reset|image|button/.test(_6.type.toLowerCase()))) { var _4 = _243(_6); if (!_30[_25]) _30[_25] = _4; else if (_4 && _4 != '') _30[_25] += ', ' + _4 } } return _30 } function _637(_34) { var _161 = _328(_34); if (!_161 || !_11._272) return; var _1, _51; for (_1 = 0; _1 < _161.elements.length; _1++) { var _6 = _161.elements[_1]; if (_6.tagName && /input|textarea/.test(_6.tagName.toLowerCase()) && (!_6.type || !/hidden|submit|reset|image|file|button|password/.test(_6.type.toLowerCase()))) { var _4 = _243(_6); if (!_4 || _4.length <= 3 || _620(_6) || _405(_6)) continue; var _87 = _512(_4); if (_87.length === 0) continue; var _158 = []; for (_51 = 0; _51 < _87.length; _51++) { _158.push(_87[_51]._146) } var _169 = false; for (_51 = 0; _51 < _0._108.length; _51++) { var _220 = _0._108[_51]; _169 = _158.length === _220.length && _498(_220, _158) === 0; if (_169) break } if (!_169) _0._108.push(_158) } } if (_0._108.length) { _0._108 = _0._108.slice(-100); _649(_0._108) } } function _649(_35) { try { _3.localStorage.setItem('mf_replaceHashes', _8._69(_35)) } catch (e) { } } function _664() { try { return _8._149(_3.localStorage.getItem('mf_replaceHashes')) || [] } catch (e) { return [] } } function _693(_4) { if (_0._108.length === 0) return _4; var _87 = _512(_4); for (var _1 = 0; _1 < _0._108.length; _1++) { var _220 = _0._108[_1]; var _159; do { var _100 = _159 !== undefined ? _159 + 1 : 0; _159 = _498(_87, _220, _100); if (_159 !== -1) { var _41 = _87[_159]._41; var _174 = _87[_159 + _220.length - 1]._174; var _665 = _845('*', _174 - _41); _4 = _4.slice(0, _41) + _665 + _4.slice(_174) } } while (_159 !== -1) } return _4 } function _512(_4) { var _158 = []; var _41; function _501(_174) { if (_41 === undefined) return; var _502 = _4.slice(_41, _174); _158.push({ _41: _41, _174: _41 + _502.length, _146: _110(_502) }); _41 = undefined } for (var _1 = 0; _1 < _4.length; _1++) { var _314 = _4[_1]; if (_844(_314)) { if (_41 === undefined) { _41 = _1 } } else { _501(_1) } } _501(); return _158 } function _498(_185, _87, _100) { for (var _1 = _100 || 0; _1 < _185.length; _1++) { if (_1 + _87.length > _185.length) break; if (_666(_185, _87, _1)) return _1 } return -1 } function _666(_185, _87, _100) { var _169 = false; for (var _1 = _100 || 0, _51 = 0; _1 < _185.length && _51 < _87.length; _1++, _51++) { _169 = _185[_1]._146 === _87[_51]; if (!_169) break } return _169 } function _243(_2) { var _4 = ''; if (_2.type && /radio|checkbox/.test(_2.type.toLowerCase())) _4 = _2.checked ? _2.value : ''; else if (_2.tagName && /select/.test(_2.tagName.toLowerCase()) && _2.options) for (var j = 0; j < _2.options.length; j++) { var _412 = _2.options[j].selected ? _2.options[j].value : ''; if (_412 && _412 != '') _4 += (_4 && _4 != '' ? ',' : '') + _412 } else _4 = _2.value; return _4 || '' } function _176(_2) { if (_2.type === 'password') return '*'; var _4 = _243(_2); if (_614(_2)) { _4 = _4.replace(/./g, _622(_2.type)) } else if (_569(_2) && !_405(_2)) { _4 = _4.slice(0, 2) + _4.slice(2).replace(/./g, _622(_2.type)) } return _4 } function _475(_2) { var _183 = _2.textContent; if (_2.nodeType === 3 && _2.parentNode) _2 = _2.parentNode; var _605 = _693(_183); if (_605 !== _183 && _14.replaceLastFormValues) _183 = _605; if (_692(_2)) _183 = _183.replace(/./g, '*'); return _183 } function _405(_2) { return _8._130(_2, 'mouseflow') || _394.indexOf(_2) !== -1 } function _271(_2) { if (!_2) return false; if (_2[NodeMap.ID_PROP]) return !!_171(_2, _262); while (_2) { if (_600(_2)) return true; _2 = _2.parentNode } return false } function _600(_2) { return _400.indexOf(_2) !== -1 } function _610(_2) { return _8._130(_2, 'no-mouseflow') || (!_14.keyLogging && !_405(_2)) || _271(_2) } function _614(_2) { return (_610(_2) || _620(_2) || _691(_2)) && _621(_2) && !_635.test(_2.type) } function _692(_2) { return (_2.isContentEditable || _2.tagName === 'TEXTAREA') && _610(_2) } function _691(_2) { return _14.gdprEnabled && (_689(_2) || _687(_2)) } function _620(_2) { return _2.maxLength === 16 || _357(_2.value) } function _357(_4) { return _690.test(_4) } function _689(_2) { return /email/i.test(_2.type) || _688.test(_2.value) } function _687(_2) { return /tel/i.test(_2.type) } function _569(_2) { return _621(_2) && /^\d{3}[^a-z]*$/i.test(_2.value) } function _621(_2) { return _2.tagName === 'INPUT' || _2.tagName === 'TEXTAREA' } function _622(_686) { return /number/i.test(_686) ? '0' : '*' } function _695(_37) { return _614(_37.target) || _569(_37.target) ? '191' : (_37.which && _37.which.toString()) || '' } function _763(_2) { var _563 = _60(_2); var _264 = _0._565[_563]; var _256 = _176(_2); var _30 = _256; if (_264 && _264.length > 3 && _256.indexOf(_264) === 0) _30 = '+||' + _256.substring(_264.length); _0._565[_563] = _256; return _30 } function _562(_34, _322, _325) { try { var _222 = []; for (var _55 in _322) { if (typeof _325[_55] == 'undefined' || _322[_55] != _325[_55]) _222.push(_55) } for (var _55 in _325) { if (typeof _322[_55] == 'undefined' && _222.indexOf(_55) === -1) _222.push(_55) } for (var i = 0; i < _222.length; i++) { _24(_5._431, { target: _34 + '||' + _222[i] }) } } catch (_44) { _10('Error in _562: ' + _44.message) } } function _685(_34) { try { var _213 = _684(_34); for (var i = 0; i < _213.length; i++) { _24(_5._437, { target: _34 + '||' + _213[i] }) } } catch (_44) { _10('Error in getBlankFields: ' + _44.message) } } function _684(_34) { var _213 = []; var _35 = _326(_34); for (var _55 in _35) if (_35[_55] == '') _213.push(_55); return _213 } function _328(_34) { for (var j = 0; j < _9.forms.length; j++)if (_60(_9.forms[j]) == _34) { return _9.forms[j] } return null } function _683() { _682(); _680() } function _344() { _681(); _450() } function _682() { var _585 = _559('mf_user').split('|'); for (var _1 = 0; _1 < _585.length; _1++) { var _73 = _585[_1]; switch (_1) { case 0: _11._143 = _73; break; case 1: _11._223 = _73 !== '' ? _73.split(/[$,]+/) : []; break } } _11._234 = _11._143 !== ''; if (_11._143 === '' || _11._143 === '1') _11._143 = _323() } function _681() { _557('mf_user', [_11._143, _11._223.join('$')].join('|'), 1, _329(_81)) } function _680() { var _578 = _559('mf_' + _45).split('|'); for (var _1 = 0; _1 < _578.length; _1++) { var _73 = _578[_1]; switch (_1) { case 0: _11._56 = _73; break; case 1: _11._84 = _677(_73); break; case 2: _0._384 = parseInt(_73, 10); break; case 3: _0._125 = _73 !== '' ? _73.split('.') : []; break; case 4: _11._245 = parseInt(_73, 10); break; case 5: _0._226 = _73; break; case 6: _0._223 = _73 !== '' ? _73.split(/[$,]+/) : []; break; case 7: _11._234 = _73 === '1'; break; case 8: _0._553 = _73; break; case 9: _11._142 = parseFloat(_73); break } } if (!_11._56) _11._56 = _14.sessionId || _679(); if (!_11._142) _11._142 = _678(); var _230 = _11._84[_11._84.length - 1]; if (_230) _11._409 = _230._49 } function _679() { var sessionId = _429(); return sessionId && sessionId.length === 32 ? sessionId : null } function _678() { var recordingRate = _429(); return /^\d+\.\d+$/.test(recordingRate) ? parseFloat(recordingRate) : null } function _429() { return _14.crossDomainSupport && _3.name && _3.name.indexOf('mf_' + _45) === 0 ? _3.name.split('=')[1] : null } function _450() { _557('mf_' + _45, [_11._56, _676(), +new Date(), _0._125.join('.'), _11._245, _0._226 || '', _0._223.join('$'), _11._234 ? '1' : '0', _172, _11._142].join('|'), 0, _329(_81)); if (_14.crossDomainSupport) _3.name = 'mf_' + _45 + '=' + (_11._56 || _11._142) } function _677(_4) { return _4.split(/[$,]+/).map(function (_212) { var _35 = _212.split('.'); return { _49: _35[0], _150: _35[1], _91: +_35[2] } }) } function _676() { return _11._84.concat([{ _49: _11._95, _150: _110(_14.path || _14.location.pathname), _91: _0._91 }]).slice(-5).map(function (_212) { return _212._49 + '.' + _212._150 + '.' + _212._91 }).join('$') } var _263 = '__mouseflow_properties__'; var _262 = 'is-blacklisted'; function _171(_27, _23) { if (!_27) return null; var _175 = _27[_263]; return _175 ? _175[_23] : null } function _170(_27, _23, _4, _675) { var _175 = _27[_263]; if (!_175) _175 = _27[_263] = {}; _175[_23] = _4; if (_675 && _27.childNodes && _27.childNodes.length) { for (var _74 = _27.firstChild; _74; _74 = _74.nextSibling) { _170(_74, _23, _4, true) } } } function _474(_27) { delete _27[_263]; if (_27.childNodes && _27.childNodes.length) { for (var _74 = _27.firstChild; _74; _74 = _74.nextSibling) { _474(_74) } } } function _674() { _474(_3.document.body) } function _673() { _0._91 = +new Date(); _0._236 = +new Date(); _398 = _22._269(_468, _57._518); _347 = _22._269(_798, _57._672); _399 = _22._269(_303, _57._671); _227 = _22._52(_580, _57._401) } function _670() { if (_14.forceStart) return true; if (_625()) { _10('Recording not started - session ID is invalid.'); return false } if (_634()) { _10('Recording not started - honored "do not track" browser setting.'); return false } if (_632()) { _10('Recording not started - the browser was identified as a bot.'); return false } if (!_242._364(_138)) { _10('Recording not started - page does not match page rules'); return false } var _268 = _669.filter(function (_70) { return _242._193(_70) }).sort(_668)[0]; if (_268) { _188 = _268._188; _10('Recording rate set from page recording rule: ' + _268._18 + ', "' + _268._4 + '"') } if (!_11._142) _11._142 = _694(); var _448 = _11._56 || _11._142 <= _188; if (!_448) _10('Recording not started - recordingRate or blocked'); _450(); return _448 } function _668(_636, _667) { return _667._188 - _636._188 } function _694() { return _105.round(_105.random() * 10000000) / 100000 } function _634() { return _14.honorDoNotTrack && _11._473 } function _625() { return _11._56 && _11._56.length != 32 } function _632() { if (_14.enableBots) return false; return _3.navigator.webdriver || /ptst|headlesschrome|lighthouse/i.test(_3.navigator.userAgent) } function _628() { return (_11._245 < _57._631) } function _624(_93) { return _286(_93.getMonth() + 1, 2) + _286(_93.getDate(), 2) + _286(_93.getSeconds(), 2) + _286(_93.getMilliseconds(), 3).slice(1) + _323() } function _286(_629, _261) { return (new Array(_261 + 1).join('0') + _629).slice(-_261) } function _633() { return !_11._56 || !_628() || _0._553 !== _172 || (_0._384 > 0 && (+new Date() - _0._384 > _57._401)) } function _627() { var _483 = new Date(); return _105.max(new Date(_483.getFullYear(), 0, 1).getTimezoneOffset(), new Date(_483.getFullYear(), 6, 1).getTimezoneOffset()) } function _626() { try { _17._21(_9, 'scroll', 'div,section,ul,.mf-scroll-listen', function (_6) { if (_6.target === _9) { _0._76 = { x: _3.pageXOffset, y: _3.pageYOffset } } else if (_6.delegatedTarget) { _826(_60(_6.delegatedTarget), _6.delegatedTarget.scrollLeft, _6.delegatedTarget.scrollTop) } }, { _31: true, _541: true }); _17._21(_9, 'mousemove', function (_6) { _0._122 = { x: _6.pageX, y: _6.pageY } }, { _31: true }); _17._21(_9.documentElement, 'mouseleave', function () { _24(_5._630, {}); _140(_86._189) }, { _31: true, _195: true }); _17._21(_9, 'mousedown', function (_6) { _822(_6, _6.target) }, { _31: true }); _17._21(_9, 'mouseup', function (_6) { _823(_6, _6.target) }, { _31: true }); _17._21(_9, 'click', 'a,input,select,button,.mf-listen-click', function (_6) { _824(_6, _6.delegatedTarget || _6.target) }, { _31: true, _541: true }); try { var _404 = _811(); if (_404) { _17._21(_9, 'mouseenter', _404, function (_6) { _24(_5._287, { x: _6.pageX, y: _6.pageY, target: _60(_6.target) }) }, { _31: true, _195: true }); _17._21(_9, 'mouseleave', _404, function (_6) { _24(_5._189, { x: _6.pageX, y: _6.pageY, target: _60(_6.target) }) }, { _31: true, _195: true }) } } catch (_44) { _10('Error in getHoverSelectors: ' + _44.message) } _17._21(_9, 'focus', 'input,textarea,select,button', function (_6) { _24(_5._428, { target: _60(_6.target) }) }, { _31: true }); _17._21(_9, 'blur', 'input,textarea,select,button', function (_6) { _24(_5._430, { target: _60(_6.target) }) }, { _31: true }); _17._21(_9, 'keypress', 'input,textarea,select', function (_6) { if (_6.target && _6.target.type !== 'password') { _24(_5._380, { target: _60(_6.target) }) } }, { _31: true }); _17._21(_9, 'keydown', 'input,textarea,select', function (_6) { if (_6.target && _6.target.type !== 'password') { _24(_5._281, { target: _60(_6.target), value: _695(_6) }) } }, { _31: true }); _17._21(_9, 'keyup', 'input,textarea,select', function (_6) { if (_6.target && _6.target.type !== 'password') { _24(_5._283, { target: _60(_6.target), value: _763(_6.target) }); if (_357(_243(_6.target))) _96('payment') } }, { _31: true }); _17._21(_9, 'change', 'input,textarea,select', function (_6) { _24(_5._202, { target: _60(_6.target), value: _176(_6.target) }); if (_6.target && ['password', 'file'].indexOf(_6.target.type) === -1 && _357(_243(_6.target))) _96('payment') }, { _31: true }); _17._21(_9, 'submit', 'form', function (_6) { _527(_60(_6.target)) }, { _31: true }); if (_11._524) { _17._21(_9, 'touchstart', function (_6) { if (!_6.originalEvent || !_6.originalEvent.touches) return; var _71 = _6.originalEvent.touches; if (_71.length > 0) { _24(_5._379, { x: _71[0].pageX, y: _71[0].pageY }) } if (_71.length > 1) { _24(_5._408, { x: _71[1].pageX, y: _71[1].pageY }) } }, { _31: true }); _17._21(_9, 'touchmove', function (_6) { if (!_6.originalEvent || !_6.originalEvent.touches) return; var _71 = _6.originalEvent.touches; var _265 = _94(); var _421 = _265 - _57._518; if (_71.length > 0 && _0._516 < _421) { _24(_5._378, { x: _71[0].pageX, y: _71[0].pageY }); if (_71.length > 1) { _24(_5._370, { x: _71[1].pageX, y: _71[1].pageY }) } _0._516 = _265; var _697 = !_180(_285(), _0._141); if (_697) { _0._141 = _285(); _24(_5._250, _0._141); if (_0._356 < _421) { _24(_5._250, _0._141); _0._356 = _265 } var _812 = _0._164[_0._164.length - 0]; if (new Date() - _812 < 1000) { _0._164.push(+new Date()); _0._164 = _0._164.slice(-5); if (_0._203.length + _0._164.length === 5) { _140(_86._538) } } } _0._76 = { x: _3.pageXOffset, y: _3.pageYOffset }; if (_0._361 < _421 && !_180(_0._76, _0._239)) { _0._239 = _0._76; _24(_5._258, _0._76); _0._361 = _265 } } }, { _31: true }); _17._21(_9, 'touchend', function (_6) { if (!_6.originalEvent || !_6.originalEvent.touches) return; var _71 = _6.originalEvent.touches; if (_71.length === 0) _24(_5._276, { x: 0, y: 0 }); if (_71.length > 1) _24(_5._376, { x: 0, y: 0 }) }, { _31: true }); _17._21(_9, 'orientationchange', function () { _24(_5._372, { x: _3.orientation, y: 0 }); _0._203.push(+new Date()); _0._203 = _0._203.slice(-5); if (_0._203.length + _0._164.length === 5) { _140(_86._538) } }, { _31: true }) } _17._21(_3, _837(), function () { if (_0._133) { if (+new Date() - _0._133 < _14.registerSubmitTimeout) { _10('Registering formSubmit'); _0._226 = _110(_14.location.pathname) } else { _10('Not registering formSubmit. Timeout exceeded.') } } _59() }, { _31: true }); var _489 = _3.onerror; _3.onerror = function (_117, _16, _373, _375, _413) { var _813 = new Date() - _0._229; if (_813 > 1000 && _0._216 < 50) { _0._229 = +new Date(); var _358 = 'Malformed error'; if (_117 && _117.message) _358 = _117.message; else if (typeof _117 === 'string') _358 = _117; _0._131 = { _117: _358, _16: typeof _16 === 'string' ? _16 : 'Malformed URL', _373: '' + _373, _375: '' + _375, _815: _413 && _413.stack && _413.stack.substring(0, 800) }; if (_0._152 !== 0 && _0._229 - _0._152 < 100) { _140(_86._462, _0._424); _128._304('clickError'); _439() } } if (_489) _489.apply(this, arguments) }; var _814 = CSSStyleSheet.prototype.insertRule; var _387 = {}; CSSStyleSheet.prototype.insertRule = function () { _814.apply(this, arguments); if (!_209) return; var _27 = this.ownerNode; var _13 = _27 ? _209.serializeNode(_27) : null; if (!_13) return; _22._116(_387[_27]); _387[_27] = _22._52(function () { delete _387[_27]; _13.textContent = _366(_27); _209.mirror.applyChanged({ removed: [], addedOrMoved: [], attributes: [], text: [_13] }) }, 200) }; if (_14.keyLogging) _817() } catch (_44) { _10('Error in bindDomEvents: ' + _44.message) } } function _439() { if (_0._131) { _0._216++; var _816 = 'website=' + _45 + '&session=' + _11._56 + '&page=' + _11._95 + '&type=error&data=' + _65(_8._69({ seq: _0._216, errorMsg: _0._131._117, url: _0._131._16, line: _0._131._373, col: _0._131._375, stack: _0._131._815 })); _24(_5._85, { x: _0._216, y: 0 }); _10('JS error ' + _0._216 + ', msg: ' + _0._131._117); _115({ _16: _135 + 'data', _13: _816 }); _0._131 = null } } function _454() { _17._545(); if (_411) _22._151(_411) } function _817() { _0._217 = _593(); _411 = _22._269(function () { _821(_820(_593(), _0._217)) }, 200) } function _593() { var _609 = _9.querySelectorAll('input,textarea,select'); var _616 = {}; for (var i = 0; i < _609.length; i++) { var _55 = _609[i]; if (_8._130(_55, 'no-mouseflow')) continue; if (!_818(_55, ['text', 'textarea', 'select-one'])) continue; _616[_60(_55)] = _176(_55) } return _616 } function _818(_55, _819) { return _55.type && new RegExp(_819.join('|'), 'i').test(_55.type) } function _820(_217, _587) { var _232 = []; for (var _23 in _217) { var _4 = _217[_23]; var _588 = _587[_23]; if (_588 !== undefined && _588 !== _4) _232.push({ id: _23, value: _4 }); _587[_23] = _4 } return _232 } function _821(_232) { if (_94() - _0._443 > 100) { for (var i = 0; i < _232.length; i++) { var _32 = _232[i]; _24(_5._202, { target: _32.id, value: _32.value }) } } } function _822(_6, _2) { if ((+new Date()) - _0._426 < 20) return; _0._426 = +new Date(); _24(_5._288, { x: _6.pageX, y: _6.pageY, target: _60(_2) }) } function _823(_6, _2) { if ((+new Date()) - _0._460 < 20) return; _0._460 = +new Date(); var _123 = _418(_2, _6.pageX, _6.pageY); if (!_123 && _2.firstElementChild) _123 = _418(_2.firstElementChild, _6.pageX, _6.pageY); if (_123) _24(_5._279, { x: _123.x, y: _123.y, target: _60(_2) }) } function _824(_6, _2) { if ((+new Date()) - _0._152 < 20) return; var _42 = _60(_2); _0._152 = +new Date(); _0._424 = _42; _24(_5._280, { x: _6.pageX, y: _6.pageY, target: _42 }); _0._233.push(_0._152); _0._233 = _0._233.slice(-5); if (_0._233[4] - _0._233[0] < 1000) { _140(_86._825, _42); _128._304('clickRage') } if (_0._152 !== 0 && _0._229 !== 0 && _0._152 - _0._229 < 100) { _140(_86._462, _42); _128._304('clickError'); _439() } } function _826(_49, _827, _828) { _0._198[_49] = { x: _827, y: _828 }; if (_290) return; _290 = _22._52(_434, 100); function _434() { _290 = null; var _606 = true; for (var _42 in _0._198) { if (_0._198.hasOwnProperty(_42)) { _24(_5._402, { x: _0._198[_42].x, y: _0._198[_42].y, target: _42 }); _606 = false } } if (!_606) { _0._198 = {}; _290 = _22._52(_434, 100) } } } function _418(_27, _829, _830) { var _38 = _582(_27); if (_38 == null || !_38.height || !_38.width) return null; return { x: parseInt((_829 - _0._76.x - _38.x) / parseFloat(_38.width) * 65535), y: parseInt((_830 - _0._76.y - _38.y) / parseFloat(_38.height) * 65535) } } function _811() { var _444 = {}; var _441 = /[^(]:hover/; if (_14.useAllHoverSelectors) { for (var _1 = 0; _1 < _9.styleSheets.length; _1++) { var _248 = _9.styleSheets[_1]; try { var _214 = _248.cssRules ? _248.cssRules : _248.rules; for (var _51 = 0; _51 < _214.length; _51++) { var _472 = _248.cssRules[_51]; if (!_441.test(_472.selectorText)) continue; var _33 = _472.selectorText.split(','); var _7; for (var _340 = 0; _340 < _33.length; _340++) { _7 = _33[_340].replace(/^\s+|\s+$/g, ''); if (_441.test(_7)) { _7 = _7.substring(0, _7.indexOf(':hover')); _7 = _831(_7); _444[_7] = true } } } } catch (_44) { _10('Cannot inspect external css file, :hover support may fail: ' + _248.href) } } } var _33 = ['a', 'input', 'select', 'button', 'textarea', 'li', 'canvas', '.mf-listen']; for (_7 in _444) { _7 = _7.replace(/^\s+|\s+$/g, ''); if (_7 != '' && _7 != 'a' && !_204(_7, ' a') && !_204(_7, ' select') && !_204(_7, ' submit') && !_204(_7, ' textarea') && !_204(_7, ' li')) _33.push(_7) } _33.push.apply(_33, _253); return _33.slice(0, 1000).join(',') } function _831(_32) { var _453 = [/:active/g, /:visited/g, /::before/g, /:before/g, /::after/g, /:after/g, /::first-letter/g, /::first-line/g, /::selection/g]; for (var _1 = 0; _1 < _453.length; _1++)_32 = _32.replace(_453[_1], ''); return _32 } function _65(_810) { try { return _3.encodeURIComponent(_810) } catch (_44) { _10('Encode error: ' + _44.message); return '' } } function _24(_18, _20) { if (!_67) return; if (_0._13.length === 0) _0._236 = +new Date(); var _39 = _469(_18, _20, _0._132, _0._35); if (!_39) return; if (_795(_18)) { _22._116(_227); _227 = _22._52(_580, _57._401); _0._310 = _94() } if (_435(_18)) _0._443 = _94(); var _808 = _556(_0._107) + (_39._101 ? _284.encode(_39._101).length : 0), _789 = _556(_0._35) + (_39._4 ? _284.encode(_39._4).length : 0); var totalDataSize = _0._13.length + _39._13.length + _808 + _789; if (totalDataSize > _57._438) { _277(); if (_39._4 !== undefined) _39._13[_39._13.length - 1] = 0; _0._13 = _39._13; _0._13[0] = 0; _0._13[1] = 0; if (_39._101 !== undefined) _0._107.push(_39._101); if (_39._4 !== undefined) _0._35.push(_39._4) } else { _0._13 = _0._13.concat(_39._13); if (_39._101 !== undefined) _0._107.push(_39._101); if (_39._4 !== undefined) _0._35.push(_39._4); if (_18 === _5._276) { _277() } } } function _414(_355) { _471(_11._409, _355) } function _471(_95, _355) { var _13 = [], _132 = [], _107 = [], _35 = []; _355.forEach(function (_37) { if (!_37._20) _37._20 = {}; var _39 = _469(_37._18, _37._20, _132, _35); if (!_39) return; _13 = _13.concat(_39._13); if (_39._101 !== undefined) _107.push(_39._101); if (_39._4 !== undefined) _35.push(_39._4) }); var _207 = 0; var _395 = _452(_207, _13, _107, _35); _115({ _16: _135 + 'events?w=' + _45 + '&s=' + _11._56 + '&p=' + _95 + '&li=0&lh=0&ls=0&d=' + _395 }) } function _469(_18, _20, _132, _35) { var _101; var _4 = _20.value; var _381 = -1; var _13 = []; _13._572 = false; if (_791(_18) && !_792(_20)) return null; if (_20.value && _20.value.length > _57._438) { _10('Event, type: ' + _18 + ', skipping due to large value, details: ' + _8._69(_20)); return null } _112(2, _579(), _13); _112(1, _18, _13); if (_20.x < 0) _20.x = 0; if (_20.y < 0) _20.y = 0; if (_20.x > 65534) _20.x = 65534; if (_20.y > 65534) _20.y = 65534; if (_20.x != undefined) _112(2, _20.x, _13); if (_20.y != undefined) _112(2, _20.y, _13); if (_20.target != undefined) { if (typeof _20.target == 'object' && _20.target.id != undefined) _20.target = _20.target.id; if (_18 !== _5._96 && _20.target && _20.target.indexOf('||') === -1) { var _2 = _584(_20.target); if (_2) { if (_271(_2)) return null; if (_2.form && !_271(_2.form)) _20.target = _60(_2.form) + '||' + _20.target } } for (var _1 = 0; _1 < _132.length; _1++) { if (_132[_1] === _20.target) { _381 = _1; break } } } if (_793(_18)) { if (!_20.target) { _112(2, 65535, _13) } else if (_381 === -1) { var _466 = _132.length; _112(2, _466, _13); _101 = _466 + ':' + _20.target; _132.push(_20.target) } else { _112(2, _381, _13) } } if (_18 !== _5._257 && _18 !== _5._224) _10('Event, type: ' + _18 + ', time: ' + _94() + ', details: ' + _8._69(_20)); if (_794(_18)) { if (_4 instanceof Array) _4 = _4.join(', '); _112(1, _35.length, _13) } if (_13._572) { _10('Event, type: ' + _18 + ', skipping due to overflow in temp data, details: ' + _8._69(_20)); return null } return { _13: _13, _101: _101, _4: _4 } } function _579() { return +new Date() - _0._236 } function _790() { return _3.performance && _3.performance.timing.domLoading > 0 ? _0._433 - _3.performance.timing.domLoading : 0 } function _611() { return _3.performance && _3.performance.timing.loadEventStart > 0 && _3.performance.timing.fetchStart > 0 ? _3.performance.timing.loadEventStart - _3.performance.timing.fetchStart : 0 } function _791(_18) { return [_5._250, _5._258, _5._257, _5._288, _5._279, _5._280, _5._287, _5._189, _5._591, _5._85, _5._379, _5._378, _5._276, _5._372, _5._408, _5._370, _5._376, _5._377, _5._463, _5._383, _5._467, _5._368, _5._48, _5._402, _5._224, _5._89].indexOf(_18) !== -1 } function _792(_20) { return _20.x !== undefined && _20.y !== undefined && !isNaN(_20.x) && !isNaN(_20.y) } function _793(_18) { return [_5._288, _5._279, _5._280, _5._287, _5._189, _5._380, _5._283, _5._202, _5._428, _5._430, _5._273, _5._96, _5._377, _5._383, _5._368, _5._281, _5._437, _5._431, _5._402, _5._224, _5._89].indexOf(_18) !== -1 } function _794(_18) { return [_5._283, _5._202, _5._281, _5._89].indexOf(_18) !== -1 } function _795(_18) { return _796(_18) || _435(_18) || _797(_18) } function _796(_18) { return [_5._257, _5._288, _5._279, _5._280, _5._258, _5._287, _5._189, _5._224].indexOf(_18) !== -1 } function _435(_18) { return [_5._380, _5._283, _5._202, _5._281].indexOf(_18) !== -1 } function _797(_18) { return [_5._379, _5._378, _5._276, _5._372, _5._408, _5._370, _5._376, _5._377, _5._463, _5._383, _5._467, _5._368].indexOf(_18) !== -1 } function _468() { if (!_180(_285(), _0._141)) { _0._141 = _285(); _24(_5._250, _0._141); _0._356 = _94() } if (!_180(_0._122, _0._470)) { _0._470 = _0._122; _24(_5._257, _0._122) } if (!_180(_0._76, _0._239)) { _0._239 = _0._76; _24(_5._258, _0._76); _0._361 = _94() } } function _798() { if (!_180(_0._122, _0._457)) { _0._457 = _0._122; var _445 = _9.elementFromPoint(_0._122.x - _0._76.x, _0._122.y - _0._76.y); var _123 = _418(_445, _0._122.x, _0._122.y); if (_123) { _24(_5._224, { x: _123.x, y: _123.y, target: _60(_445) }) } } } function _277() { var _207 = _0._236 - _0._91; var _395 = _452(_207, _0._13, _0._107, _0._35); _0._238.push(_395); _0._13 = []; _0._35 = []; _0._107 = []; _0._236 = +new Date(); if (_94() > _57._799) { _10('Pageview over max.time, stopping.'); _454(); _22._151(_398); _22._151(_347); _22._151(_399); _22._116(_227); _186 = false } else { _800() } } function _452(_207, _13, _107, _35) { var _208 = []; _112(3, _207, _208); _112(2, _13.length, _208); _208 = _208.concat(_13); return _873.e(_208) + '.' + _555(_107 || []) + '.' + _555(_35 || []) } function _800() { if (_186 && _0._238.length > 0) { if (_0._241 == 1) { _11._245++ } var _82 = _11._272 ? _318() : []; for (var _1 = 0; _1 < _0._238.length; _1++) { _82.push({ _16: _135 + 'events?w=' + _45 + '&s=' + _11._56 + '&p=' + _11._95 + '&q=' + _0._241 + '&li=' + _0._451 + '&lh=' + _0._449 + '&ls=' + _0._447 + '&d=' + _0._238[_1] }); _0._241++; _0._451 = _0._310; _0._449 = _0._141.y; _0._447 = _0._239.y } _0._238 = []; if (_11._272) { _440(_82.slice(-10)); _442() } else { for (var _1 = 0; _1 < _82.length; _1++) { _115(_82[_1]) } } if (_0._241 > _57._801) _59() } } function _442() { if (_0._305) return; var _15 = _318().slice(0, 1)[0]; if (_15) { _0._305 = true; _15._165 = _15._85 = function () { _440(_318().slice(1)); _0._305 = false; _22._52(_442, 1) }; _115(_15) } } function _318() { return _8._149(_3.sessionStorage.getItem('mf_transmitQueue')) || [] } function _440(_82) { _3.sessionStorage.setItem('mf_transmitQueue', _8._69(_82)) } function _115(_15) { if (!_15 || !_15._16) return; _344(); if (_615() && _3.XDomainRequest) { try { _15._16 = _804(_334(_15._16, '0')); var _102 = new _3.XDomainRequest(); _102.open(_15._13 ? 'POST' : 'GET', _15._16); _102.onload = function () { if (_15._165) _15._165(_446(_102)) }; _102.onerror = function () { if (_15._85) _15._85(_446(_102)) }; _102.onprogress = function () { _10('XDR progress:' + _15._16) }; _102.ontimeout = function () { _10('XDR timeout:' + _15._16) }; _102.timeout = 20000; _22._52(function () { _102.send(_15._13) }, 500) } catch (_44) { _10('Error in transmitCrossDomain (XDomainRequest): ' + _44.message); if (_15._85) _15._85({}) } } else if (_3.XMLHttpRequest) { try { var _75 = new _3.XMLHttpRequest(); _75.onreadystatechange = function () { if (_75.readyState !== 4 || !_75.status) return; if (_803(_75.status)) { if (_15._165) _15._165(_455(_75)) } else { if (_15._85) _15._85(_455(_75)) } }; if (_15._13, _15._422) { _15._13 = pako.gzip(_15._13); _15._16 = _334(_15._16, '1') } else { _15._16 = _334(_15._16, '0') } _75.open(_15._13 ? 'POST' : 'GET', _15._16, true); _75.setRequestHeader('Content-type', 'text/plain'); if (_15._802) _75.withCredentials = true; _75.send(_15._13) } catch (_44) { _10('Error in transmitCrossDomain (XMLHttpRequest): ' + _44.message); if (_15._85) _15._85({}) } } } function _446(_102) { return { _456: _102.responseText } } function _455(_75) { return { _330: _75.status, _456: _75.response } } function _334(_16, _4) { return /\/(html|dom)/.test(_16) ? _16 + (_16.indexOf('?') === -1 ? '?' : '&') + 'gz=' + _4 : _16 } function _332(_18, _13) { _115({ _16: _135 + 'data', _13: 'website=' + _45 + '&session=' + _11._56 + '&page=' + _11._95 + '&type=' + _18 + '&data=' + _65(_8._69(_13)) }) } function _803(_330) { return _330 >= 200 && _330 < 300 } function _615() { return _9.all && !_3.atob; } function _856() { return _9.all && !_9.addEventListener; } function _804(_16) { return _16.replace(/^https?:/i, _14.location.protocol) } function _805(_48, _806) { var _319 = _65(_8._69(_48.data)); var _15 = { _16: _135 + 'html' + '?website=' + _45 + '&session=' + _11._56 + '&page=' + _11._95, _13: 'size=' + _806 + '&html=' + _319, _422: _14.compress }; if (_11._272) { var _82 = _464(); if (_319 !== '') _82.push(_15); else _10('Initial DOM empty, not sending'); _461(_82.slice(-10)); _465() } else { if (_319 !== '') _115(_15); else _10('Initial DOM empty, not sending') } } function _465() { var _82 = _464(); var _15 = _82.splice(0, 1)[0]; if (_15) { _10('Sending initial DOM mutations. Size: ' + _15._13.length); _15._165 = _15._85 = function () { _461(_82); _22._52(_465, 1) }; _115(_15) } } function _464() { return _8._149(_3.sessionStorage.getItem('mf_initialDomQueue')) || [] } function _461(_82) { try { _3.sessionStorage.setItem('mf_initialDomQueue', _8._69(_82)) } catch (_44) { _10('InitialDomQueue could not be stored in sessionStorage: ' + _44.message) } } function _807(_48) { var _157 = _48.data.args[1].some(function (_88) { return _307._157(_88) }); if (_157) { _10('DOM mutation is a duplicate and has not been added.'); return } var _459 = _834(_48, _0._155); if (_459 > -1) { _0._155[_459].data = _48.data; _10('Deduplicating DOM mutation'); return } if (_14.domReuse) { var _275 = _855(_48); var _458 = _832(_275); if (_458 > -1) { _48.sequence = _458; _10('Reusing already sent DOM mutation, sequence ' + _48.sequence); _24(_5._48, { x: _48.sequence, y: 0 }); return } else _0._331.push(_275) } _48.sequence = ++_0._833; _24(_5._48, { x: _48.sequence, y: 0 }); _0._155.push(_48); if (!_201) _201 = _22._52(_423, 1500) } function _832(_275) { for (var i = 0; i < _0._331.length; i++)if (_0._331[i] == _275) return i + 1; return -1 } function _855(_48) { return _110(_8._69(_48.data)) } function _423() { _201 = 0; if (_186 && _0._155.length > 0) { var _316 = _0._155.length; var _13 = ''; for (var i = 0; i < _316; i++) { var _48 = _0._155[i]; _13 += (_13 !== '' ? '|||' : '') + _48.sequence + '.' + _8._69(_48.data) } _0._155 = []; if (_13 != '') { _13 = 'website=' + _45 + '&session=' + _11._56 + '&page=' + _11._95 + '&data=' + _65(_13); _115({ _16: _135 + 'dom', _13: _13, _422: _14.compress }); _10('Sending DOM mutations: ' + _316 + ', size: ' + _13.length); _0._432 += _316; if (_0._432 > _57._427) { _10('DOM mutation limit of ' + _57._427 + ' reached. Stopping recording.'); _59() } } } } function _834(_68, _425) { if (!_14.domDeduplicator) return -1; var _72 = _68.data.args; var _436 = _476(_72); var _496 = _574(_72); if (!_436 && !_496) return -1; for (var i = 0; i < _425.length; i++) { var _348 = _425[i].data.args; if (_436 && _476(_348) && _860(_72[2], _348[2])) { return i } else if (_496 && _574(_348)) { return i } } return -1 } function _476(_72) { return _575(_72) && _72[2].filter(_858).length === _72[2].length } function _574(_72) { return _575(_72) && _72[2].filter(_859).length === _72[2].length } function _575(_72) { return _72[0].length === 0 && _72[1].length === 0 && _72[2].length > 0 && _72[3].length === 0 } function _858(_228) { return _228.attributes.style && _576(_228.attributes) === 1 } function _859(_228) { return _228.attributes.d && _576(_228.attributes) === 1 } function _576(obj) { var count = 0; for (var prop in obj) if (obj.hasOwnProperty(prop)) count++; return count } function _860(_306, _577) { if (_306.length !== _577.length) return false; for (var i = 0; i < _306.length; i++) { var _861 = _306[i], _862 = _577[i]; if (_861.id !== _862.id) return false } return true } function _303() { if (_0._13.length > 0 && _579() >= 5000) { _24(_5._303, {}); _277() } } function _580() { _10('Inactivity timeout.'); _59(true) } function _180(_103, _581) { return _103.x == _581.x && _103.y == _581.y } function _285() { return { x: _3.innerWidth, y: _3.innerHeight } } function _582(_156) { if (!_156 || !_156.getBoundingClientRect) return null; var _134 = _156.getBoundingClientRect(); var _210; if (!_156.childElementCount && !_134.height && !_134.width) _210 = _863(_156); if (!_210) { return { x: _134.left, y: _134.top, width: _134.width, height: _134.height } } else { _210.x += _134.left - _156.offsetLeft; _210.y += _134.top - _156.offsetTop; return _210 } } function _863(_2) { var _181 = window.getComputedStyle(_2, [':after']); if (!_181) return _181; return { x: +_181.left.slice(0, -2), y: +_181.top.slice(0, -2), width: +_181.width.slice(0, -2), height: +_181.height.slice(0, -2) } } function _60(_2) { try { return _864(_2) || _583(_2) } catch (_44) { _10('Error in getElementPath: ' + _44.message) } return '' } function _864(_2) { if (_2.attributes['name'] && _2.attributes['name'].value && _2.form != undefined && /button|input|select|textarea/.test(_2.tagName.toLowerCase())) { var _339 = _9.getElementsByName(_2.attributes['name'].value); if (_339.length > 1) { for (var _1 = 0; _1 < _339.length; _1++)if (_2 == _339[_1]) return _2.attributes['name'].value + '[' + _1 + ']_mf' } else return _2.attributes['name'].value } return null } function _583(_58) { var _28 = []; try { while (_58 && _58.nodeType == 1) { var _7 = ''; if (_58.getAttribute('id') && !_8._139(_58, 'data-mf-ignore-child-ids')) { _7 += '#' + _58.getAttribute('id'); _28.unshift(_7); break } else { _7 += _58.tagName.toLowerCase(); var _278 = '', _338 = _58, _179 = 1; if (_58.parentNode && _58.parentNode.tagName && _58.parentNode.tagName.toLowerCase() == 'body') { var _80 = _8._148(_58); _278 = _80.length ? '.' + _80.join('.') : '' } if (_278 !== '' && _9.querySelectorAll && _9.querySelectorAll('body > ' + _7 + _278).length == 1) _7 += _278; else { while ((_338 = _338.previousElementSibling)) { if (_338.tagName.toLowerCase() === _7) _179++ } if (_179 !== 1) _7 += ':[' + _179 + ']' } } _28.unshift(_7); if (!_58.parentNode) return ''; _58 = _58.parentNode } } catch (_44) { _10('Error in _583: ' + _44.message) } return _28.join(' > ').replace('html > body > ', '> ') } function _584(_49) { if (!_49) return null; var _2 = _696(_49); if (!_2) { try { _2 = _9.querySelector(_867(_49)) } catch (_44) { _10('Error in _584: ' + _44.message) } } return _2 } function _696(_25) { if (!_25) return null; var _119 = _586.exec(_25); if (_119 && _119[1]) { try { var _47 = _3.parseInt(_119[1]); return _9.getElementsByName(_25.replace(_586, ''))[_47] } catch (_44) { } } var _97 = _9.getElementsByName(_25); if (_97 && _97.length === 1) return _97[0]; return null } function _867(_28) { if (!_28) return null; if (_28.substr(0, 1) === '>') _28 = 'html > body ' + _28; _28 = _28.replace(/^#(\d)/, '#\\3$1 '); _28 = _28.replace(/^#(-\d)/, '#\\$1'); _28 = _28.replace(/:([^\[])/g, '\\:$1'); _28 = _28.replace(/^#[^\s]+/, function (id) { return '#' + id.slice(1).replace(/([^a-zA-Z\d\s:\\])/g, '\\$1') }); _28 = _28.replace(/:\[([^\]]+)\]/g, ':nth-of-type($1)'); return _28 } function _112(_866, _4, _211) { for (var _1 = _866 - 1; _1 > 0; _1--) { var _573 = _105.pow(256, _1); _589(_105.floor(_4 / _573), _211); _4 = _4 % _573 } _589(_4, _211) } function _589(_570, _211) { if (_570 > 255) { _211._572 = true; return } _211.push(_570) } function _555(_2) { var _30 = ''; for (var _1 = 0; _1 < _2.length; _1++) { _30 += (_1 > 0 ? ',' : '') + _284.encode('' + _2[_1]) } return _30 } function _556(_2) { var _297 = 0; for (var _1 = 0; _1 < _2.length; _1++)_297 += _284.encode('' + _2[_1]).length + 1; return _297 > 0 ? _297 - 1 : _297 } function _329(_32) { if (_868(_32.hostname) || !_14.includeSubDomains) return _32.hostname; var _26 = _32.href; var _874 = /\.co\.|\.com\.|\.ac\.|\.org\.|\.gov\.|\.edu\.|\.net\./; _26 = _26.replace(/^http(s)?\:\/\/?/i, '').replace(/^([^\/]+)\/.*/i, '$1').replace(/:[\d]*$/, ''); if (_874.test(_26)) _26 = _26.replace(/^([^\.]+\.){1,}([^\.]+\.[^\.]+\.[^\.]+)$/i, '$2'); else _26 = _26.replace(/^([^\.]+\.){1,}([^\.]+\.[^\.]+)$/i, '$2'); return '.' + _26 } function _868(ipaddress) { if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) { return (true) } return (false) } function _557(_25, _4, _869, _26) { var _558 = ''; if (_869 == 1) { var _93 = new Date(); _93.setTime(_93.getTime() + _57._870); _558 = '; expires=' + _93.toGMTString() } var _871 = _14.secureCookie ? 'secure;' : ''; _9.cookie = _25 + '=' + _4 + _558 + '; path=/; domain=' + _26 + ';' + _871 + 'SameSite=Strict;' } function _559(_25) { var _561 = _25 + '='; var _560 = _9.cookie.split(';'); for (var i = 0; i < _560.length; i++) { var c = _560[i]; while (c.charAt(0) === ' ') { c = c.substring(1) } if (c.indexOf(_561) === 0) { return c.substring(_561.length, c.length) } } return '' } function _879(_872) { return _872.replace(/<!--[\s]*MouseflowExcludeStart[\s]*([\s\S]*?)-->([\s\S]*?)<!--[\s]*MouseflowExcludeEnd[\s]*-->/g, '$1') } var _873 = new function () { for (var d = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.split(''), c = 64; c;)--c; this.e = function (e) { for (var a = [], f = 0, b = 0, g, c = e.length, h = c % 3; f < c;)a[b++] = d[(g = e[f++] << 16 | e[f++] << 8 | e[f++]) >> 18 & 63] + d[g >> 12 & 63] + d[g >> 6 & 63] + d[g & 63]; if (h) for (a[--b] = a[b].substr(0, a[b].length - (h = 3 - h)); h--;)a[b] += '*'; return a.join('') } }; var _284 = { _249: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', encode: function (c) { for (var a = '', d, b, e, i, h, f, g = 0, c = this._857(c); g < c.length;)d = c.charCodeAt(g++), b = c.charCodeAt(g++), e = c.charCodeAt(g++), i = d >> 2, d = (d & 3) << 4 | b >> 4, h = (b & 15) << 2 | e >> 6, f = e & 63, isNaN(b) ? h = f = 64 : isNaN(e) && (f = 64), a = a + this._249.charAt(i) + this._249.charAt(d) + this._249.charAt(h) + this._249.charAt(f); return a }, _857: function (c) { for (var c = c.replace(/\r\n/g, '\n'), a = '', d = 0; d < c.length; d++) { var b = c.charCodeAt(d); 128 > b ? a += String.fromCharCode(b) : (127 < b && 2048 > b ? a += String.fromCharCode(b >> 6 | 192) : (a += String.fromCharCode(b >> 12 | 224), a += String.fromCharCode(b >> 6 & 63 | 128)), a += String.fromCharCode(b & 63 | 128)) } return a } }; function _323() { var _103 = function () { return ((1 + _105.random()) * 65536 | 0).toString(16).substring(1) }; return _103() + _103() + _103() + _103() + _103() + _103() + _103() + _103() } var _324 = 0; function _613() { if (_9.body) { _865(); return } _324++; if (_324 === 1) { _10('Retrying to initialize recorder - document.body is not set') } else if (_324 === 25) { _10('Failed to initialize recorder'); return }; _22._52(_613, 200) } function _865() { _10('Initializing recorder'); if (!_838(_14.location.hostname)) return; if (_856()) { _10('Recording not started - browser is IE8 or older'); return } if (_564) _854(); if (_14.privacyToolEnabled) { _10('Starting privacy tool'); _300._41(_113, _45, _218, _219, _253, _10); return } if (_14.liveHeatmapsEnabled) { _10('Starting live heatmaps'); _190._41(_45, _10); _3._mfq = new _327(_3._mfq); return } if (_564 || _835) return; _566 = true; function _567() { if (!_67 && _14.autoStart && _9.readyState !== 'loading') _41(); _311(_611()) } _17._21(_9, 'readystatechange', _567); _567() } function _311(_836) { if (_336 || !_67 || _9.readyState !== 'complete') return; _24(_5._591, { x: _836, y: _8._341() }); _336 = true } function _837() { return _14.useUnload ? 'unload' : 'beforeunload' } function _204(_571, _590) { return _571.indexOf(_590, _571.length - _590.length) !== -1 } function _110(_32) { var _146 = 0, _608; for (var _1 = 0; _1 < _32.length; _1++) { _608 = _32.charCodeAt(_1); _146 = ((_146 << 5) - _146) + _608 } return _146.toString() } function _612(_23) { for (var _1 = 0; _1 < _0._125.length; _1++)if (_0._125[_1].split('_')[0] === _110(_23)) { return _1 } return -1 } function _592(_23, _4) { var _317 = _612(_23); var _343 = _110('' + _4); if (_317 > -1) { if (_0._125[_317].split('_')[1] === _343) { return false } _0._125[_317] = _110(_23) + '_' + _343 } else if (_0._125.length < 20) { _0._125.push(_110(_23) + '_' + _343) } return true } function _838(_26) { var _839 = _26; _26 = _309(_26); var _619 = false; for (var _1 = 0; _1 < _200.length; _1++) { if (_26 == _309(_200[_1])) { _619 = true; break } } _26 = _840(_26); var _623 = false; for (var _1 = 0; _1 < _200.length; _1++) { if (_26 == _309(_200[_1])) { _623 = true; break } } var _30 = _619 || _623; if (!_30) _10('Domain was blocked: ' + _839 + ' - domain list: ' + _200); return _30 } function _309(_26) { if (_26 == null) return ''; _26 = _26.toLowerCase(); _26 = _26.replace(/^\s+|\s+$/g, ''); if (_26.substring(0, 4) == 'www.') { _26 = _26.substring(4, _26.length) } return _26 } function _840(_26) { if (_14.includeSubDomains) { _26 = _841(_26) } return _26 } function _841(_26) { var _99 = _26.split('.'); if (_99.length <= 2) return _26; if (_26.indexOf('.co.') > -1 || _26.indexOf('.com.') > -1 || _26.indexOf('.org.') > -1) { _99 = _99.slice(_99.length - 3, _99.length); return _99.join('.') } _99 = _99.slice(_99.length - 2, _99.length); return _99.join('.') } function _842() { var _30 = []; if (typeof Ember != 'undefined') _30.push('em'); if (typeof angular != 'undefined') _30.push('an'); if (typeof Backbone != 'undefined') _30.push('bb'); return _30 } function _843() { if (_14.autoTagging) { _10('Autotagging session'); var _618 = ['utm_source', 'utm_medium', 'utm_term', 'utm_content', 'utm_campaign', 'gclid']; for (var _1 = 0; _1 < _618.length; _1++) { var _313 = _618[_1]; var _4 = _617(_14.location.href, _313); if (!_4) _4 = _617(_9.referrer, _313); if (_4) _3._mfq.push(['setVariable', _313, _4]) } } } function _617(_16, _25) { _25 = _25.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]'); var regex = new RegExp('[\\?&]' + _25 + '=([^&#]*)'), results = regex.exec(_16); return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' ')) } function _844(_314) { switch (_314) { case ' ': case '"': case "'": case '.': case ',': case '_': case '-': case '+': case '/': case '*': case ':': case '=': case '!': case '?': case '@': case '#': case '%': case '&': case '{': case '}': case '[': case ']': case '\\': case '|': return false; default: return true } } function _845(_4, _392) { var _30 = ''; for (var _1 = 0; _1 < _392; _1++) { _30 += _4 } return _30 } function _94() { return +new Date() - _0._91 } function _10(_117) { if (_14.debug) console.log('MF' + (_14.includeDebugTime ? ' - ' + _94() : '') + ': ' + _117) } if (!_615()) { var pako = function () { function t() { this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0 } function e(t, e, a, n) { for (var r = 65535 & t | 0, i = t >>> 16 & 65535 | 0, s = 0; 0 !== a;) { s = a > 2e3 ? 2e3 : a, a -= s; do r = r + e[n++] | 0, i = i + r | 0; while (--s); r %= 65521, i %= 65521 } return r | i << 16 | 0 } var a = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" }, n = function () { function t() { for (var t, e = [], a = 0; a < 256; a++) { t = a; for (var n = 0; n < 8; n++)t = 1 & t ? 3988292384 ^ t >>> 1 : t >>> 1; e[a] = t } return e } function e(t, e, n, r) { var i = a, s = r + n; t ^= -1; for (var h = r; h < s; h++)t = t >>> 8 ^ i[255 & (t ^ e[h])]; return t ^ -1 } var a = t(); return e }(), r = { Buf8: Uint8Array, Buf16: Uint16Array, assign: function (t) { for (var e = Array.prototype.slice.call(arguments, 1); e.length;) { var a = e.shift(); if (a) { if ("object" != typeof a) throw new TypeError(a + "must be non-object"); for (var n in a) a.hasOwnProperty(n) && (t[n] = a[n]) } } return t }, shrinkBuf: function (t, e) { return t.length === e ? t : t.subarray ? t.subarray(0, e) : (t.length = e, t) }, arraySet: function (t, e, a, n, r) { if (e.subarray && t.subarray) return void t.set(e.subarray(a, a + n), r); for (var i = 0; i < n; i++)t[r + i] = e[a + i] }, flattenChunks: function (t) { var e, a, n, r, i, s; for (n = 0, e = 0, a = t.length; e < a; e++)n += t[e].length; for (s = new Uint8Array(n), r = 0, e = 0, a = t.length; e < a; e++)i = t[e], s.set(i, r), r += i.length; return s } }, i = function () { function t(t) { var e, a, n, i, s, h = t.length, _ = 0; for (i = 0; i < h; i++)a = t.charCodeAt(i), 55296 === (64512 & a) && i + 1 < h && (n = t.charCodeAt(i + 1), 56320 === (64512 & n) && (a = 65536 + (a - 55296 << 10) + (n - 56320), i++)), _ += a < 128 ? 1 : a < 2048 ? 2 : a < 65536 ? 3 : 4; for (e = new r.Buf8(_), s = 0, i = 0; s < _; i++)a = t.charCodeAt(i), 55296 === (64512 & a) && i + 1 < h && (n = t.charCodeAt(i + 1), 56320 === (64512 & n) && (a = 65536 + (a - 55296 << 10) + (n - 56320), i++)), a < 128 ? e[s++] = a : a < 2048 ? (e[s++] = 192 | a >>> 6, e[s++] = 128 | 63 & a) : a < 65536 ? (e[s++] = 224 | a >>> 12, e[s++] = 128 | a >>> 6 & 63, e[s++] = 128 | 63 & a) : (e[s++] = 240 | a >>> 18, e[s++] = 128 | a >>> 12 & 63, e[s++] = 128 | a >>> 6 & 63, e[s++] = 128 | 63 & a); return e } function e(t) { var e = t.length; if (e < 65537 && (t.subarray && n || !t.subarray && a)) return String.fromCharCode.apply(null, r.shrinkBuf(t, e)); for (var i = "", s = 0; s < e; s++)i += String.fromCharCode(t[s]); return i } var a = !0, n = !0; try { String.fromCharCode.apply(null, [0]) } catch (t) { a = !1 } try { String.fromCharCode.apply(null, new Uint8Array(1)) } catch (t) { n = !1 } return { string2buf: t, buf2binstring: e } }(), s = function () { function t(t) { for (var e = t.length; --e >= 0;)t[e] = 0 } function e(t, e, a, n, r) { this.static_tree = t, this.extra_bits = e, this.extra_base = a, this.elems = n, this.max_length = r, this.has_stree = t && t.length } function a(t, e) { this.dyn_tree = t, this.max_code = 0, this.stat_desc = e } function n(t) { return t < 256 ? it[t] : it[256 + (t >>> 7)] } function i(t, e) { t.pending_buf[t.pending++] = 255 & e, t.pending_buf[t.pending++] = e >>> 8 & 255 } function s(t, e, a) { t.bi_valid > Q - a ? (t.bi_buf |= e << t.bi_valid & 65535, i(t, t.bi_buf), t.bi_buf = e >> Q - t.bi_valid, t.bi_valid += a - Q) : (t.bi_buf |= e << t.bi_valid & 65535, t.bi_valid += a) } function h(t, e, a) { s(t, a[2 * e], a[2 * e + 1]) } function _(t, e) { var a = 0; do a |= 1 & t, t >>>= 1, a <<= 1; while (--e > 0); return a >>> 1 } function l(t) { 16 === t.bi_valid ? (i(t, t.bi_buf), t.bi_buf = 0, t.bi_valid = 0) : t.bi_valid >= 8 && (t.pending_buf[t.pending++] = 255 & t.bi_buf, t.bi_buf >>= 8, t.bi_valid -= 8) } function o(t, e) { var a, n, r, i, s, h, _ = e.dyn_tree, l = e.max_code, o = e.stat_desc.static_tree, d = e.stat_desc.has_stree, u = e.stat_desc.extra_bits, f = e.stat_desc.extra_base, c = e.stat_desc.max_length, g = 0; for (i = 0; i <= N; i++)t.bl_count[i] = 0; for (_[2 * t.heap[t.heap_max] + 1] = 0, a = t.heap_max + 1; a < M; a++)n = t.heap[a], i = _[2 * _[2 * n + 1] + 1] + 1, i > c && (i = c, g++), _[2 * n + 1] = i, n > l || (t.bl_count[i]++, s = 0, n >= f && (s = u[n - f]), h = _[2 * n], t.opt_len += h * (i + s), d && (t.static_len += h * (o[2 * n + 1] + s))); if (0 !== g) { do { for (i = c - 1; 0 === t.bl_count[i];)i--; t.bl_count[i]--, t.bl_count[i + 1] += 2, t.bl_count[c]--, g -= 2 } while (g > 0); for (i = c; 0 !== i; i--)for (n = t.bl_count[i]; 0 !== n;)r = t.heap[--a], r > l || (_[2 * r + 1] !== i && (t.opt_len += (i - _[2 * r + 1]) * _[2 * r], _[2 * r + 1] = i), n--) } } function d(t, e, a) { var n, r, i = new Array(N + 1), s = 0; for (n = 1; n <= N; n++)i[n] = s = s + a[n - 1] << 1; for (r = 0; r <= e; r++) { var h = t[2 * r + 1]; 0 !== h && (t[2 * r] = _(i[h]++, h)) } } function u() { var t, a, n, r, i, s = new Array(N + 1); for (n = 0, r = 0; r < q - 1; r++)for (ht[r] = n, t = 0; t < 1 << Z[r]; t++)st[n++] = r; for (st[n - 1] = r, i = 0, r = 0; r < 16; r++)for (_t[r] = i, t = 0; t < 1 << $[r]; t++)it[i++] = r; for (i >>= 7; r < J; r++)for (_t[r] = i << 7, t = 0; t < 1 << $[r] - 7; t++)it[256 + i++] = r; for (a = 0; a <= N; a++)s[a] = 0; for (t = 0; t <= 143;)nt[2 * t + 1] = 8, t++, s[8]++; for (; t <= 255;)nt[2 * t + 1] = 9, t++, s[9]++; for (; t <= 279;)nt[2 * t + 1] = 7, t++, s[7]++; for (; t <= 287;)nt[2 * t + 1] = 8, t++, s[8]++; for (d(nt, G + 1, s), t = 0; t < J; t++)rt[2 * t + 1] = 5, rt[2 * t] = _(t, 5); lt = new e(nt, Z, F + 1, G, N), ot = new e(rt, $, 0, J, N), dt = new e(new Array(0), tt, 0, K, R) } function f(t) { var e; for (e = 0; e < G; e++)t.dyn_ltree[2 * e] = 0; for (e = 0; e < J; e++)t.dyn_dtree[2 * e] = 0; for (e = 0; e < K; e++)t.bl_tree[2 * e] = 0; t.dyn_ltree[2 * V] = 1, t.opt_len = t.static_len = 0, t.last_lit = t.matches = 0 } function c(t) { t.bi_valid > 8 ? i(t, t.bi_buf) : t.bi_valid > 0 && (t.pending_buf[t.pending++] = t.bi_buf), t.bi_buf = 0, t.bi_valid = 0 } function g(t, e, a, n) { c(t), n && (i(t, a), i(t, ~a)), r.arraySet(t.pending_buf, t.window, e, a, t.pending), t.pending += a } function p(t, e, a, n) { var r = 2 * e, i = 2 * a; return t[r] < t[i] || t[r] === t[i] && n[e] <= n[a] } function b(t, e, a) { for (var n = t.heap[a], r = a << 1; r <= t.heap_len && (r < t.heap_len && p(e, t.heap[r + 1], t.heap[r], t.depth) && r++, !p(e, n, t.heap[r], t.depth));)t.heap[a] = t.heap[r], a = r, r <<= 1; t.heap[a] = n } function w(t, e, a) { var r, i, _, l, o = 0; if (0 !== t.last_lit) do r = t.pending_buf[t.d_buf + 2 * o] << 8 | t.pending_buf[t.d_buf + 2 * o + 1], i = t.pending_buf[t.l_buf + o], o++, 0 === r ? h(t, i, e) : (_ = st[i], h(t, _ + F + 1, e), l = Z[_], 0 !== l && (i -= ht[_], s(t, i, l)), r--, _ = n(r), h(t, _, a), l = $[_], 0 !== l && (r -= _t[_], s(t, r, l))); while (o < t.last_lit); h(t, V, e) } function v(t, e) { var a, n, r, i = e.dyn_tree, s = e.stat_desc.static_tree, h = e.stat_desc.has_stree, _ = e.stat_desc.elems, l = -1; for (t.heap_len = 0, t.heap_max = M, a = 0; a < _; a++)0 !== i[2 * a] ? (t.heap[++t.heap_len] = l = a, t.depth[a] = 0) : i[2 * a + 1] = 0; for (; t.heap_len < 2;)r = t.heap[++t.heap_len] = l < 2 ? ++l : 0, i[2 * r] = 1, t.depth[r] = 0, t.opt_len--, h && (t.static_len -= s[2 * r + 1]); for (e.max_code = l, a = t.heap_len >> 1; a >= 1; a--)b(t, i, a); r = _; do a = t.heap[1], t.heap[1] = t.heap[t.heap_len--], b(t, i, 1), n = t.heap[1], t.heap[--t.heap_max] = a, t.heap[--t.heap_max] = n, i[2 * r] = i[2 * a] + i[2 * n], t.depth[r] = (t.depth[a] >= t.depth[n] ? t.depth[a] : t.depth[n]) + 1, i[2 * a + 1] = i[2 * n + 1] = r, t.heap[1] = r++, b(t, i, 1); while (t.heap_len >= 2); t.heap[--t.heap_max] = t.heap[1], o(t, e), d(i, l, t.bl_count) } function m(t, e, a) { var n, r, i = -1, s = e[1], h = 0, _ = 7, l = 4; for (0 === s && (_ = 138, l = 3), e[2 * (a + 1) + 1] = 65535, n = 0; n <= a; n++)r = s, s = e[2 * (n + 1) + 1], ++h < _ && r === s || (h < l ? t.bl_tree[2 * r] += h : 0 !== r ? (r !== i && t.bl_tree[2 * r]++, t.bl_tree[2 * W]++) : h <= 10 ? t.bl_tree[2 * X]++ : t.bl_tree[2 * Y]++, h = 0, i = r, 0 === s ? (_ = 138, l = 3) : r === s ? (_ = 6, l = 3) : (_ = 7, l = 4)) } function k(t, e, a) { var n, r, i = -1, _ = e[1], l = 0, o = 7, d = 4; for (0 === _ && (o = 138, d = 3), n = 0; n <= a; n++)if (r = _, _ = e[2 * (n + 1) + 1], !(++l < o && r === _)) { if (l < d) { do h(t, r, t.bl_tree); while (0 !== --l) } else 0 !== r ? (r !== i && (h(t, r, t.bl_tree), l--), h(t, W, t.bl_tree), s(t, l - 3, 2)) : l <= 10 ? (h(t, X, t.bl_tree), s(t, l - 3, 3)) : (h(t, Y, t.bl_tree), s(t, l - 11, 7)); l = 0, i = r, 0 === _ ? (o = 138, d = 3) : r === _ ? (o = 6, d = 3) : (o = 7, d = 4) } } function y(t) { var e; for (m(t, t.dyn_ltree, t.l_desc.max_code), m(t, t.dyn_dtree, t.d_desc.max_code), v(t, t.bl_desc), e = K - 1; e >= 3 && 0 === t.bl_tree[2 * et[e] + 1]; e--); return t.opt_len += 3 * (e + 1) + 5 + 5 + 4, e } function z(t, e, a, n) { var r; for (s(t, e - 257, 5), s(t, a - 1, 5), s(t, n - 4, 4), r = 0; r < n; r++)s(t, t.bl_tree[2 * et[r] + 1], 3); k(t, t.dyn_ltree, e - 1), k(t, t.dyn_dtree, a - 1) } function x(t) { var e, a = 4093624447; for (e = 0; e <= 31; e++, a >>>= 1)if (1 & a && 0 !== t.dyn_ltree[2 * e]) return U; if (0 !== t.dyn_ltree[18] || 0 !== t.dyn_ltree[20] || 0 !== t.dyn_ltree[26]) return D; for (e = 32; e < F; e++)if (0 !== t.dyn_ltree[2 * e]) return D; return U } function B(t) { ut || (u(), ut = !0), t.l_desc = new a(t.dyn_ltree, lt), t.d_desc = new a(t.dyn_dtree, ot), t.bl_desc = new a(t.bl_tree, dt), t.bi_buf = 0, t.bi_valid = 0, f(t) } function A(t, e, a, n) { s(t, (I << 1) + (n ? 1 : 0), 3), g(t, e, a, !0) } function S(t) { s(t, L << 1, 3), h(t, V, nt), l(t) } function C(t, e, a, n) { var r, i, h = 0; t.level > 0 ? (t.strm.data_type === H && (t.strm.data_type = x(t)), v(t, t.l_desc), v(t, t.d_desc), h = y(t), r = t.opt_len + 3 + 7 >>> 3, i = t.static_len + 3 + 7 >>> 3, i <= r && (r = i)) : r = i = a + 5, a + 4 <= r && e !== -1 ? A(t, e, a, n) : t.strategy === j || i === r ? (s(t, (L << 1) + (n ? 1 : 0), 3), w(t, nt, rt)) : (s(t, (O << 1) + (n ? 1 : 0), 3), z(t, t.l_desc.max_code + 1, t.d_desc.max_code + 1, h + 1), w(t, t.dyn_ltree, t.dyn_dtree)), f(t), n && c(t) } function E(t, e, a) { return t.pending_buf[t.d_buf + 2 * t.last_lit] = e >>> 8 & 255, t.pending_buf[t.d_buf + 2 * t.last_lit + 1] = 255 & e, t.pending_buf[t.l_buf + t.last_lit] = 255 & a, t.last_lit++, 0 === e ? t.dyn_ltree[2 * a]++ : (t.matches++, e--, t.dyn_ltree[2 * (st[a] + F + 1)]++, t.dyn_dtree[2 * n(e)]++), t.last_lit === t.lit_bufsize - 1 } var j = 4, U = 0, D = 1, H = 2, I = 0, L = 1, O = 2, P = 3, T = 258, q = 29, F = 256, G = F + 1 + q, J = 30, K = 19, M = 2 * G + 1, N = 15, Q = 16, R = 7, V = 256, W = 16, X = 17, Y = 18, Z = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], $ = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], tt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], et = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], at = 512, nt = new Array(2 * (G + 2)); t(nt); var rt = new Array(2 * J); t(rt); var it = new Array(at); t(it); var st = new Array(T - P + 1); t(st); var ht = new Array(q); t(ht); var _t = new Array(J); t(_t); var lt, ot, dt, ut = !1; return { _tr_init: B, _tr_stored_block: A, _tr_align: S, _tr_flush_block: C, _tr_tally: E } }(), h = function () { function t(t, e) { return t.msg = a[e], e } function i(t) { return (t << 1) - (t > 4 ? 9 : 0) } function h(t) { for (var e = t.length; --e >= 0;)t[e] = 0 } function _(t) { var e = t.state, a = e.pending; a > t.avail_out && (a = t.avail_out), 0 !== a && (r.arraySet(t.output, e.pending_buf, e.pending_out, a, t.next_out), t.next_out += a, e.pending_out += a, t.total_out += a, t.avail_out -= a, e.pending -= a, 0 === e.pending && (e.pending_out = 0)) } function l(t, e) { s._tr_flush_block(t, t.block_start >= 0 ? t.block_start : -1, t.strstart - t.block_start, e), t.block_start = t.strstart, _(t.strm) } function o(t, e) { t.pending_buf[t.pending++] = e } function d(t, e) { t.pending_buf[t.pending++] = e >>> 8 & 255, t.pending_buf[t.pending++] = 255 & e } function u(t, a, i, s) { var h = t.avail_in; return h > s && (h = s), 0 === h ? 0 : (t.avail_in -= h, r.arraySet(a, t.input, t.next_in, h, i), 1 === t.state.wrap ? t.adler = e(t.adler, a, h, i) : 2 === t.state.wrap && (t.adler = n(t.adler, a, h, i)), t.next_in += h, t.total_in += h, h) } function f(t, e) { var a, n, r = t.max_chain_length, i = t.strstart, s = t.prev_length, h = t.nice_match, _ = t.strstart > t.w_size - rt ? t.strstart - (t.w_size - rt) : 0, l = t.window, o = t.w_mask, d = t.prev, u = t.strstart + nt, f = l[i + s - 1], c = l[i + s]; t.prev_length >= t.good_match && (r >>= 2), h > t.lookahead && (h = t.lookahead); do if (a = e, l[a + s] === c && l[a + s - 1] === f && l[a] === l[i] && l[++a] === l[i + 1]) { i += 2, a++; do; while (l[++i] === l[++a] && l[++i] === l[++a] && l[++i] === l[++a] && l[++i] === l[++a] && l[++i] === l[++a] && l[++i] === l[++a] && l[++i] === l[++a] && l[++i] === l[++a] && i < u); if (n = nt - (u - i), i = u - nt, n > s) { if (t.match_start = e, s = n, n >= h) break; f = l[i + s - 1], c = l[i + s] } } while ((e = d[e & o]) > _ && 0 !== --r); return s <= t.lookahead ? s : t.lookahead } function c(t) { var e, a, n, i, s, h = t.w_size; do { if (i = t.window_size - t.lookahead - t.strstart, t.strstart >= h + (h - rt)) { r.arraySet(t.window, t.window, h, h, 0), t.match_start -= h, t.strstart -= h, t.block_start -= h, a = t.hash_size, e = a; do n = t.head[--e], t.head[e] = n >= h ? n - h : 0; while (--a); a = h, e = a; do n = t.prev[--e], t.prev[e] = n >= h ? n - h : 0; while (--a); i += h } if (0 === t.strm.avail_in) break; if (a = u(t.strm, t.window, t.strstart + t.lookahead, i), t.lookahead += a, t.lookahead + t.insert >= at) for (s = t.strstart - t.insert, t.ins_h = t.window[s], t.ins_h = (t.ins_h << t.hash_shift ^ t.window[s + 1]) & t.hash_mask; t.insert && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[s + at - 1]) & t.hash_mask, t.prev[s & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = s, s++, t.insert--, !(t.lookahead + t.insert < at));); } while (t.lookahead < rt && 0 !== t.strm.avail_in) } function g(t, e) { var a = 65535; for (a > t.pending_buf_size - 5 && (a = t.pending_buf_size - 5); ;) { if (t.lookahead <= 1) { if (c(t), 0 === t.lookahead && e === U) return ft; if (0 === t.lookahead) break } t.strstart += t.lookahead, t.lookahead = 0; var n = t.block_start + a; if ((0 === t.strstart || t.strstart >= n) && (t.lookahead = t.strstart - n, t.strstart = n, l(t, !1), 0 === t.strm.avail_out)) return ft; if (t.strstart - t.block_start >= t.w_size - rt && (l(t, !1), 0 === t.strm.avail_out)) return ft } return t.insert = 0, e === I ? (l(t, !0), 0 === t.strm.avail_out ? gt : pt) : t.strstart > t.block_start && (l(t, !1), 0 === t.strm.avail_out) ? ft : ft } function p(t, e) { for (var a, n; ;) { if (t.lookahead < rt) { if (c(t), t.lookahead < rt && e === U) return ft; if (0 === t.lookahead) break } if (a = 0, t.lookahead >= at && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + at - 1]) & t.hash_mask, a = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart), 0 !== a && t.strstart - a <= t.w_size - rt && (t.match_length = f(t, a)), t.match_length >= at) if (n = s._tr_tally(t, t.strstart - t.match_start, t.match_length - at), t.lookahead -= t.match_length, t.match_length <= t.max_lazy_match && t.lookahead >= at) { t.match_length--; do t.strstart++, t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + at - 1]) & t.hash_mask, a = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart; while (0 !== --t.match_length); t.strstart++ } else t.strstart += t.match_length, t.match_length = 0, t.ins_h = t.window[t.strstart], t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + 1]) & t.hash_mask; else n = s._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++; if (n && (l(t, !1), 0 === t.strm.avail_out)) return ft } return t.insert = t.strstart < at - 1 ? t.strstart : at - 1, e === I ? (l(t, !0), 0 === t.strm.avail_out ? gt : pt) : t.last_lit && (l(t, !1), 0 === t.strm.avail_out) ? ft : ct } function b(t, e) { for (var a, n, r; ;) { if (t.lookahead < rt) { if (c(t), t.lookahead < rt && e === U) return ft; if (0 === t.lookahead) break } if (a = 0, t.lookahead >= at && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + at - 1]) & t.hash_mask, a = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart), t.prev_length = t.match_length, t.prev_match = t.match_start, t.match_length = at - 1, 0 !== a && t.prev_length < t.max_lazy_match && t.strstart - a <= t.w_size - rt && (t.match_length = f(t, a), t.match_length <= 5 && (t.strategy === J || t.match_length === at && t.strstart - t.match_start > 4096) && (t.match_length = at - 1)), t.prev_length >= at && t.match_length <= t.prev_length) { r = t.strstart + t.lookahead - at, n = s._tr_tally(t, t.strstart - 1 - t.prev_match, t.prev_length - at), t.lookahead -= t.prev_length - 1, t.prev_length -= 2; do ++t.strstart <= r && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + at - 1]) & t.hash_mask, a = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart); while (0 !== --t.prev_length); if (t.match_available = 0, t.match_length = at - 1, t.strstart++, n && (l(t, !1), 0 === t.strm.avail_out)) return ft } else if (t.match_available) { if (n = s._tr_tally(t, 0, t.window[t.strstart - 1]), n && l(t, !1), t.strstart++, t.lookahead--, 0 === t.strm.avail_out) return ft } else t.match_available = 1, t.strstart++, t.lookahead-- } return t.match_available && (n = s._tr_tally(t, 0, t.window[t.strstart - 1]), t.match_available = 0), t.insert = t.strstart < at - 1 ? t.strstart : at - 1, e === I ? (l(t, !0), 0 === t.strm.avail_out ? gt : pt) : t.last_lit && (l(t, !1), 0 === t.strm.avail_out) ? ft : ct } function w(t, e) { for (var a, n, r, i, h = t.window; ;) { if (t.lookahead <= nt) { if (c(t), t.lookahead <= nt && e === U) return ft; if (0 === t.lookahead) break } if (t.match_length = 0, t.lookahead >= at && t.strstart > 0 && (r = t.strstart - 1, n = h[r], n === h[++r] && n === h[++r] && n === h[++r])) { i = t.strstart + nt; do; while (n === h[++r] && n === h[++r] && n === h[++r] && n === h[++r] && n === h[++r] && n === h[++r] && n === h[++r] && n === h[++r] && r < i); t.match_length = nt - (i - r), t.match_length > t.lookahead && (t.match_length = t.lookahead) } if (t.match_length >= at ? (a = s._tr_tally(t, 1, t.match_length - at), t.lookahead -= t.match_length, t.strstart += t.match_length, t.match_length = 0) : (a = s._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++), a && (l(t, !1), 0 === t.strm.avail_out)) return ft } return t.insert = 0, e === I ? (l(t, !0), 0 === t.strm.avail_out ? gt : pt) : t.last_lit && (l(t, !1), 0 === t.strm.avail_out) ? ft : ct } function v(t, e) { for (var a; ;) { if (0 === t.lookahead && (c(t), 0 === t.lookahead)) { if (e === U) return ft; break } if (t.match_length = 0, a = s._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++, a && (l(t, !1), 0 === t.strm.avail_out)) return ft } return t.insert = 0, e === I ? (l(t, !0), 0 === t.strm.avail_out ? gt : pt) : t.last_lit && (l(t, !1), 0 === t.strm.avail_out) ? ft : ct } function m(t, e, a, n, r) { this.good_length = t, this.max_lazy = e, this.nice_length = a, this.max_chain = n, this.func = r } function k(t) { t.window_size = 2 * t.w_size, h(t.head), t.max_lazy_match = j[t.level].max_lazy, t.good_match = j[t.level].good_length, t.nice_match = j[t.level].nice_length, t.max_chain_length = j[t.level].max_chain, t.strstart = 0, t.block_start = 0, t.lookahead = 0, t.insert = 0, t.match_length = t.prev_length = at - 1, t.match_available = 0, t.ins_h = 0 } function y() { this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = R, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new r.Buf16(2 * tt), this.dyn_dtree = new r.Buf16(2 * (2 * Z + 1)), this.bl_tree = new r.Buf16(2 * (2 * $ + 1)), h(this.dyn_ltree), h(this.dyn_dtree), h(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new r.Buf16(et + 1), this.heap = new r.Buf16(2 * Y + 1), h(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new r.Buf16(2 * Y + 1), h(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0 } function z(e) { var a; return e && e.state ? (e.total_in = e.total_out = 0, e.data_type = Q, a = e.state, a.pending = 0, a.pending_out = 0, a.wrap < 0 && (a.wrap = -a.wrap), a.status = a.wrap ? st : dt, e.adler = 2 === a.wrap ? 0 : 1, a.last_flush = U, s._tr_init(a), O) : t(e, T) } function x(t) { var e = z(t); return e === O && k(t.state), e } function B(t, e) { return t && t.state ? 2 !== t.state.wrap ? T : (t.state.gzhead = e, O) : T } function A(e, a, n, i, s, h) { if (!e) return T; var _ = 1; if (a === G && (a = 6), i < 0 ? (_ = 0, i = -i) : i > 15 && (_ = 2, i -= 16), s < 1 || s > V || n !== R || i < 8 || i > 15 || a < 0 || a > 9 || h < 0 || h > N) return t(e, T); 8 === i && (i = 9); var l = new y; return e.state = l, l.strm = e, l.wrap = _, l.gzhead = null, l.w_bits = i, l.w_size = 1 << l.w_bits, l.w_mask = l.w_size - 1, l.hash_bits = s + 7, l.hash_size = 1 << l.hash_bits, l.hash_mask = l.hash_size - 1, l.hash_shift = ~~((l.hash_bits + at - 1) / at), l.window = new r.Buf8(2 * l.w_size), l.head = new r.Buf16(l.hash_size), l.prev = new r.Buf16(l.w_size), l.lit_bufsize = 1 << s + 6, l.pending_buf_size = 4 * l.lit_bufsize, l.pending_buf = new r.Buf8(l.pending_buf_size), l.d_buf = 1 * l.lit_bufsize, l.l_buf = 3 * l.lit_bufsize, l.level = a, l.strategy = h, l.method = n, x(e) } function S(e, a) { var r, l, u, f; if (!e || !e.state || a > L || a < 0) return e ? t(e, T) : T; if (l = e.state, !e.output || !e.input && 0 !== e.avail_in || l.status === ut && a !== I) return t(e, 0 === e.avail_out ? F : T); if (l.strm = e, r = l.last_flush, l.last_flush = a, l.status === st) if (2 === l.wrap) e.adler = 0, o(l, 31), o(l, 139), o(l, 8), l.gzhead ? (o(l, (l.gzhead.text ? 1 : 0) + (l.gzhead.hcrc ? 2 : 0) + (l.gzhead.extra ? 4 : 0) + (l.gzhead.name ? 8 : 0) + (l.gzhead.comment ? 16 : 0)), o(l, 255 & l.gzhead.time), o(l, l.gzhead.time >> 8 & 255), o(l, l.gzhead.time >> 16 & 255), o(l, l.gzhead.time >> 24 & 255), o(l, 9 === l.level ? 2 : l.strategy >= K || l.level < 2 ? 4 : 0), o(l, 255 & l.gzhead.os), l.gzhead.extra && l.gzhead.extra.length && (o(l, 255 & l.gzhead.extra.length), o(l, l.gzhead.extra.length >> 8 & 255)), l.gzhead.hcrc && (e.adler = n(e.adler, l.pending_buf, l.pending, 0)), l.gzindex = 0, l.status = ht) : (o(l, 0), o(l, 0), o(l, 0), o(l, 0), o(l, 0), o(l, 9 === l.level ? 2 : l.strategy >= K || l.level < 2 ? 4 : 0), o(l, bt), l.status = dt); else { var c = R + (l.w_bits - 8 << 4) << 8, g = -1; g = l.strategy >= K || l.level < 2 ? 0 : l.level < 6 ? 1 : 6 === l.level ? 2 : 3, c |= g << 6, 0 !== l.strstart && (c |= it), c += 31 - c % 31, l.status = dt, d(l, c), 0 !== l.strstart && (d(l, e.adler >>> 16), d(l, 65535 & e.adler)), e.adler = 1 } if (l.status === ht) if (l.gzhead.extra) { for (u = l.pending; l.gzindex < (65535 & l.gzhead.extra.length) && (l.pending !== l.pending_buf_size || (l.gzhead.hcrc && l.pending > u && (e.adler = n(e.adler, l.pending_buf, l.pending - u, u)), _(e), u = l.pending, l.pending !== l.pending_buf_size));)o(l, 255 & l.gzhead.extra[l.gzindex]), l.gzindex++; l.gzhead.hcrc && l.pending > u && (e.adler = n(e.adler, l.pending_buf, l.pending - u, u)), l.gzindex === l.gzhead.extra.length && (l.gzindex = 0, l.status = _t) } else l.status = _t; if (l.status === _t) if (l.gzhead.name) { u = l.pending; do { if (l.pending === l.pending_buf_size && (l.gzhead.hcrc && l.pending > u && (e.adler = n(e.adler, l.pending_buf, l.pending - u, u)), _(e), u = l.pending, l.pending === l.pending_buf_size)) { f = 1; break } f = l.gzindex < l.gzhead.name.length ? 255 & l.gzhead.name.charCodeAt(l.gzindex++) : 0, o(l, f) } while (0 !== f); l.gzhead.hcrc && l.pending > u && (e.adler = n(e.adler, l.pending_buf, l.pending - u, u)), 0 === f && (l.gzindex = 0, l.status = lt) } else l.status = lt; if (l.status === lt) if (l.gzhead.comment) { u = l.pending; do { if (l.pending === l.pending_buf_size && (l.gzhead.hcrc && l.pending > u && (e.adler = n(e.adler, l.pending_buf, l.pending - u, u)), _(e), u = l.pending, l.pending === l.pending_buf_size)) { f = 1; break } f = l.gzindex < l.gzhead.comment.length ? 255 & l.gzhead.comment.charCodeAt(l.gzindex++) : 0, o(l, f) } while (0 !== f); l.gzhead.hcrc && l.pending > u && (e.adler = n(e.adler, l.pending_buf, l.pending - u, u)), 0 === f && (l.status = ot) } else l.status = ot; if (l.status === ot && (l.gzhead.hcrc ? (l.pending + 2 > l.pending_buf_size && _(e), l.pending + 2 <= l.pending_buf_size && (o(l, 255 & e.adler), o(l, e.adler >> 8 & 255), e.adler = 0, l.status = dt)) : l.status = dt), 0 !== l.pending) { if (_(e), 0 === e.avail_out) return l.last_flush = -1, O } else if (0 === e.avail_in && i(a) <= i(r) && a !== I) return t(e, F); if (l.status === ut && 0 !== e.avail_in) return t(e, F); if (0 !== e.avail_in || 0 !== l.lookahead || a !== U && l.status !== ut) { var p = l.strategy === K ? v(l, a) : l.strategy === M ? w(l, a) : j[l.level].func(l, a); if (p !== gt && p !== pt || (l.status = ut), p === ft || p === gt) return 0 === e.avail_out && (l.last_flush = -1), O; if (p === ct && (a === D ? s._tr_align(l) : a !== L && (s._tr_stored_block(l, 0, 0, !1), a === H && (h(l.head), 0 === l.lookahead && (l.strstart = 0, l.block_start = 0, l.insert = 0))), _(e), 0 === e.avail_out)) return l.last_flush = -1, O } return a !== I ? O : l.wrap <= 0 ? P : (2 === l.wrap ? (o(l, 255 & e.adler), o(l, e.adler >> 8 & 255), o(l, e.adler >> 16 & 255), o(l, e.adler >> 24 & 255), o(l, 255 & e.total_in), o(l, e.total_in >> 8 & 255), o(l, e.total_in >> 16 & 255), o(l, e.total_in >> 24 & 255)) : (d(l, e.adler >>> 16), d(l, 65535 & e.adler)), _(e), l.wrap > 0 && (l.wrap = -l.wrap), 0 !== l.pending ? O : P) } function C(e) { var a; return e && e.state ? (a = e.state.status, a !== st && a !== ht && a !== _t && a !== lt && a !== ot && a !== dt && a !== ut ? t(e, T) : (e.state = null, a === dt ? t(e, q) : O)) : T } function E(t, a) { var n, i, s, _, l, o, d, u, f = a.length; if (!t || !t.state) return T; if (n = t.state, _ = n.wrap, 2 === _ || 1 === _ && n.status !== st || n.lookahead) return T; for (1 === _ && (t.adler = e(t.adler, a, f, 0)), n.wrap = 0, f >= n.w_size && (0 === _ && (h(n.head), n.strstart = 0, n.block_start = 0, n.insert = 0), u = new r.Buf8(n.w_size), r.arraySet(u, a, f - n.w_size, n.w_size, 0), a = u, f = n.w_size), l = t.avail_in, o = t.next_in, d = t.input, t.avail_in = f, t.next_in = 0, t.input = a, c(n); n.lookahead >= at;) { i = n.strstart, s = n.lookahead - (at - 1); do n.ins_h = (n.ins_h << n.hash_shift ^ n.window[i + at - 1]) & n.hash_mask, n.prev[i & n.w_mask] = n.head[n.ins_h], n.head[n.ins_h] = i, i++; while (--s); n.strstart = i, n.lookahead = at - 1, c(n) } return n.strstart += n.lookahead, n.block_start = n.strstart, n.insert = n.lookahead, n.lookahead = 0, n.match_length = n.prev_length = at - 1, n.match_available = 0, t.next_in = o, t.input = d, t.avail_in = l, n.wrap = _, O } var j, U = 0, D = 1, H = 3, I = 4, L = 5, O = 0, P = 1, T = -2, q = -3, F = -5, G = -1, J = 1, K = 2, M = 3, N = 4, Q = 2, R = 8, V = 9, W = 29, X = 256, Y = X + 1 + W, Z = 30, $ = 19, tt = 2 * Y + 1, et = 15, at = 3, nt = 258, rt = nt + at + 1, it = 32, st = 42, ht = 69, _t = 73, lt = 91, ot = 103, dt = 113, ut = 666, ft = 1, ct = 2, gt = 3, pt = 4, bt = 3; return j = [new m(0, 0, 0, 0, g), new m(4, 4, 8, 4, p), new m(4, 5, 16, 8, p), new m(4, 6, 32, 32, p), new m(4, 4, 16, 16, b), new m(8, 16, 32, 32, b), new m(8, 16, 128, 128, b), new m(8, 32, 128, 256, b), new m(32, 128, 258, 1024, b), new m(32, 258, 258, 4096, b)], { deflateInit2: A, deflateSetHeader: B, deflate: S, deflateEnd: C, deflateSetDictionary: E } }(), _ = function () { function e(n) { if (!(this instanceof e)) return new e(n); this.options = r.assign({ level: c, method: p, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: g, to: "" }, n || {}); var s = this.options; s.raw && s.windowBits > 0 ? s.windowBits = -s.windowBits : s.gzip && s.windowBits > 0 && s.windowBits < 16 && (s.windowBits += 16), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new t, this.strm.avail_out = 0; var l = h.deflateInit2(this.strm, s.level, s.method, s.windowBits, s.memLevel, s.strategy); if (l !== d) throw new Error(a[l]); if (s.header && h.deflateSetHeader(this.strm, s.header), s.dictionary) { var o; if (o = "string" == typeof s.dictionary ? i.string2buf(s.dictionary) : "[object ArrayBuffer]" === _.call(s.dictionary) ? new Uint8Array(s.dictionary) : s.dictionary, l = h.deflateSetDictionary(this.strm, o), l !== d) throw new Error(a[l]); this._dict_set = !0 } } function n(t, n) { var r = new e(n); if (r.push(t, !0), r.err) throw r.msg || a[r.err]; return r.result } function s(t, e) { return e = e || {}, e.gzip = !0, n(t, e) } var _ = Object.prototype.toString, l = 0, o = 4, d = 0, u = 1, f = 2, c = -1, g = 0, p = 8; return e.prototype.push = function (t, e) { var a, n, s = this.strm, c = this.options.chunkSize; if (this.ended) return !1; n = e === ~~e ? e : e === !0 ? o : l, "string" == typeof t ? s.input = i.string2buf(t) : "[object ArrayBuffer]" === _.call(t) ? s.input = new Uint8Array(t) : s.input = t, s.next_in = 0, s.avail_in = s.input.length; do { if (0 === s.avail_out && (s.output = new r.Buf8(c), s.next_out = 0, s.avail_out = c), a = h.deflate(s, n), a !== u && a !== d) return this.onEnd(a), this.ended = !0, !1; 0 !== s.avail_out && (0 !== s.avail_in || n !== o && n !== f) || ("string" === this.options.to ? this.onData(i.buf2binstring(r.shrinkBuf(s.output, s.next_out))) : this.onData(r.shrinkBuf(s.output, s.next_out))) } while ((s.avail_in > 0 || 0 === s.avail_out) && a !== u); return n === o ? (a = h.deflateEnd(this.strm), this.onEnd(a), this.ended = !0, a === d) : n !== f || (this.onEnd(d), s.avail_out = 0, !0) }, e.prototype.onData = function (t) { this.chunks.push(t) }, e.prototype.onEnd = function (t) { t === d && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = r.flattenChunks(this.chunks)), this.chunks = [], this.err = t, this.msg = this.strm.msg }, { gzip: s } }(); return _ }(); } _613(); this.config = function () { _14._550.apply(_14, arguments) }; this.start = function () { _41(); _311(_611()) }; this.stop = _59; this.newPageView = _846; this.stopSession = _847; this.getSessionId = function () { return _11._56 }; this.getPageViewId = function () { return _11._95 }; this.tag = _96; this.star = _848; this.setVariable = _849; this.identify = _850; this.formSubmitAttempt = _594; this.formSubmitSuccess = _349; this.formSubmitFailure = _851; this.addFriction = function (_4, _25) { _140({ _4: _4, _595: _25 }) }; this.debug = function () { _14.debug = !_14.debug; console.log('MF: Debugging ' + (_14.debug ? 'enabled' : 'disabled')) }; this.isRecording = function () { return _186 }; this.isReturningUser = function () { return _11._234 }; this.activateFeedback = _346; this.websiteId = _45; this.recordingRate = _188; this.version = _172; this.gdprEnabled = _14.gdprEnabled; this.updateHeatmap = _190._500
        } function _759(_14) { var _603 = []; function _157(_88) { if (!_14.domMutationDetectorEnable || !_88 || _88.nodeType !== 1) return false; var _596 = _88.parentNode ? _88.parentNode.id : undefined; var _597 = _88.previousSibling ? _88.previousSibling.id : undefined; var _852 = _88.tagName; var _598 = _88.attributes ? _88.attributes.id : undefined; var _599 = _88.attributes ? _88.attributes.class : undefined; var _23 = _852; if (_14.domMutationUseParentNode && _596) _23 += '_' + _596; if (_14.domMutationUsePreviousSibling && _597) _23 += '_' + _597; if (_598) _23 += '_' + _598; if (_599) _23 += '_' + _599.replace(/\s/g, "_"); var _604 = +new Date(); var _68 = _603[_23]; var _391 = _68 ? _68._392 : 0; var _853 = _68 ? ((_604 - _68._788) / 1000) : 0; var _601 = _391 < _14.domMutationCountThreshold; var _602 = _853 < _14.domMutationTimeThresholdInSeconds; var _157 = _68 ? (_601 && _602) : false; if (!_601 || !_602) _391 = 0; _603[_23] = { _788: _604, _392: _391 + 1 }; return _157 } this._157 = _157 } function _760(_3, _14, _121, _8, _17, _196) { var _113, _45, _10, _109, _365 = 'mf_liveHeatmaps', _215 = []; function _41(_352, _351) { _45 = _352; _10 = _351; _10('Live heatmaps starting'); _109 = _121._266(); if (!_109) { _10('Live heatmaps not initiated - could not create root HTML element'); return } if (!_3.opener) { _10('Live heatmaps not initiated - window.opener is missing'); return } _809() } function _59() { _259() } function _809() { _17._21(_3, 'message', function (_37) { _725(_37.data); switch (_37.data.message) { case 'MouseflowLiveHeatmaps_Init_Success': case 'MouseflowLiveHeatmaps_Hello': _113 = _37.origin; _786(_37.data.minDate, _37.data.filters, _37.data.filteredViews); _722(_37.data.languageScript, _37.data.initScript, _37.data.scripts, function () { var message = { mfCommand: 'settings', value: { websiteSettings: _37.data.websiteSettings } }; _3.postMessage(JSON.stringify(message), '*') }); break; case 'MouseflowLiveHeatmaps_StreamData_Chunk': _205(_37.data.requestUrl, true)._354(_37.data.dataChunk); break; case 'MouseflowLiveHeatmaps_StreamData_Success': _205(_37.data.requestUrl)._118(); break; case 'MouseflowLiveHeatmaps_StreamData_Error': _205(_37.data.requestUrl)._166(); break; case 'MouseflowLiveHeatmaps_RequestData_Success': _205(_37.data.requestUrl)._118(_37.data.responseText); break; case 'MouseflowLiveHeatmaps_RequestData_Error': _205(_37.data.requestUrl)._166(); break } }); _353({ message: 'MouseflowLiveHeatmaps_Init', websiteId: _45 }) } function _786(_720, _173, _721) { var _36 = _552(); var _206 = _513(); var _267 = _14.location.search.match(/mf_liveHeatmaps=([^&]+)/); var _417 = typeof _3.name === 'string' && _3.name.indexOf('mf_liveHeatmaps') === 0 ? _3.name.slice(15).split('_') : []; var _787 = _267 || _417[1] === 'init'; if (_36 && !_787) { _36.filters.url = _206.url; _79(_36); return } _36 = { isMinimized: false, appUrlBase: _113, websiteId: _45, filters: _206, minDate: _720, filteredViews: _721 }; if (_173.view) { _36.selectedFilteredView = _173.view; delete _173.view } if (_173) { Object.keys(_173).forEach(function (_23) { var _4 = _173[_23]; if (_4 instanceof Date) _4 = _255(_4); _36.filters[_23] = _4 }) } if (_267 && _267[1] !== '1') _36.filters.maptype = _267[1]; else if (_417[2]) _36.filters.maptype = _417[2]; _79(_36); _3.name = 'mf_liveHeatmaps' } function _722(_568, _416, _554, _221) { var _393 = document.createElement('script'); _393.src = _113 + _568; _393.onload = function () { var _607 = 0; _554.forEach(function (_260) { var _390 = document.createElement('script'); _390.src = _113 + _260; _390.onload = function () { _607++; if (_416 && _607 === _554.length) { var _420 = document.createElement('script'); _420.src = _113 + _416; _420.onload = _221; _359(_416); _109.appendChild(_420) } }; _359(_260); _109.appendChild(_390) }) }; _359(_568); _109.appendChild(_393) } function _552() { return _8._149(_3.localStorage.getItem(_365)) } function _79(_36) { if (_10) _10('Live heatmaps saving settings'); _36 = _36 ? _8._69(_36) : ''; _3.localStorage.setItem(_365, _36) } function _259() { if (_10) _10('Live heatmaps removing settings'); _3.localStorage.removeItem(_365) } function _205(_16, _724) { var _389 = _215.filter(function (_723) { return _723._16 === _16 })[0]; if (!_724 && _389) _215.splice(_215.indexOf(_389), 1); return _389 } function _727(_15) { if (typeof _15 !== 'object') return; var _36 = _552(); var _206 = _513(); Object.keys(_15).forEach(function (_23) { var _4 = _15[_23]; if (_4 instanceof Date) _4 = _255(_4); _36.filters[_23] = _4 || undefined }); Object.keys(_206).forEach(function (_23) { if (!_36.filters[_23]) _36.filters[_23] = _206[_23] }); if (_36.filters.view) { _36.selectedFilteredView = _36.filters.view; delete _36.filters.view } _79(_36) } function _513() { var _187 = new Date(); _187 = new Date(_187.getFullYear(), _187.getMonth(), _187.getDate()); var _363 = new Date(_187); _363.setDate(_363.getDate() - 29); return { maptype: 'click', device: 'desktop', url: _196._293(), fromdate: _255(_363), todate: _255(_187) } } function _353(_13) { _3.opener.postMessage(_13, '*'); _10('Sent ' + _13.message + (_13.requestUrl ? ', request URL: ' + _13.requestUrl : '')) } function _725(_13) { if (_13.message && _13.message.indexOf('MouseflowLiveHeatmaps_') === 0) _10('Received ' + _13.message + (_13.requestUrl ? ', request URL: ' + _13.requestUrl : '')) } function _359(_260) { _10('Live heatmaps loading script: ' + _260) } function _255(_93) { return _93.getFullYear() + '-' + _497(_93.getMonth() + 1, '00') + '-' + _497(_93.getDate(), '00') } function _497(_726, _499) { return (_499 + _726).slice(-_499.length) } this._41 = _41; this._59 = _59; this._500 = function (_15) { _727(_15); _3.postMessage('{"mfCommand":"MouseflowHeatmap_UpdateHeatmap"}', '*'); _10('Sent MouseflowHeatmap_UpdateHeatmap') }; _3.mouseflowHeatmap = { streamData: function (_16, _354, _118, _166) { _215.push({ _16: _16, _354: _354 || function () { }, _118: _118 || function () { }, _166: _166 || function () { } }); _353({ message: 'MouseflowLiveHeatmaps_StreamData', requestUrl: _16 }) }, getData: function (_16, _118, _166) { _215.push({ _16: _16, _118: _118 || function () { }, _166: _166 || function () { } }); _353({ message: 'MouseflowLiveHeatmaps_RequestData', requestUrl: _16 }) } } } function _757(_3, _121, _22, _8, _17) { var _9 = _3.document, _113, _45, _10, _12, _109, _19, _491, _503, _514, _127, _92, _274, _124, _510, _168, _295, _246, _126, _98; function _41(_728, _352, _218, _219, _253, _351) { _113 = _728; _45 = _352; _10 = _351; _12 = _711() || { _120: false, _78: 'exclude', _61: _218 || [], _62: _219 || [], _77: _253 || [] }; _109 = _121._266(); if (!_109) { _10('Privacy tool not initiated - could not create root HTML element'); return } _729(); _22._52(function () { _730(); _79(_12) }, 1000); } function _59() { _736(); _121._397() } function _729() { _17._21(_3, 'message', function (event) { switch (event.data.message) { case 'MouseflowPrivacyTool_Hello': _10('Privacy tool API ready'); _246 = event.source; if (event.data.cssSelectorBlacklist) { _12._61 = event.data.cssSelectorBlacklist; _12._62 = event.data.cssSelectorWhitelist; _12._77 = event.data.cssSelectorTracked } _504(); break; case 'MouseflowPrivacyTool_Save_Success': _10('Successfully saved CSS lists'); if (_126) _126(); _126 = undefined; _98 = undefined; break; case 'MouseflowPrivacyTool_Save_Failed': _10('Failed saving CSS lists'); if (_98) _98(); _126 = undefined; _98 = undefined; _388('Uh oh! We couldn\'t save your changes.<br><br>' + 'Please refresh the page and try again.'); break; case 'MouseflowPrivacyTool_Unauthorized': _10('Privacy tool API logged out - cannot save'); if (_98) _98(); _126 = undefined; _98 = undefined; _388('Uh oh! We couldn\'t save your changes.<br><br>' + 'Please log into Mouseflow and try again.'); break } }); if (_3.opener) { _10('Loading privacy tool API using window.opener'); _3.opener.postMessage({ message: 'MouseflowPrivacyTool_Hello' }, '*') } _22._52(function () { if (!_246) { _10('Loading privacy tool API using iframe'); var _225 = _9.createElement('iframe'); _225.style.width = '0px'; _225.style.height = '0px'; _225.style.display = 'none'; _225.src = _113 + '/websites/' + _45 + '/privacytool'; _109.appendChild(_225); _22._52(function () { if (!_246) { _10('Loading privacy tool API timed out'); _713('D\'oh! We\'re having trouble loading the Privacy Tool on this page<br>' + 'Please login to Mouseflow and try again. If you need help, email <a class="green" href="mailto:support@mouseflow.com">support@mouseflow.com</a>') } }, 5000) } }, 2000) } function _730() { _19 = _715(_12); _491 = _19.querySelector('.tool-exclude output'); _503 = _19.querySelector('.tool-whitelist output'); _514 = _19.querySelector('.tool-track output'); _127 = _19.querySelector('.tool-status-text'); _92 = _19.querySelector('.btn-widget'); _274 = _19.querySelector('.tool-loading h2'); _12._61.forEach(_493); _12._62.forEach(_492); _12._77.forEach(_494); _109.appendChild(_19); _124 = _739(); _19.appendChild(_124); _8._199(_9.body, 'mf-privacy-tool-opened', !_12._120); _731(); _504() } function _504() { if (_19 && _246) { _8._40(_19, 'is-loading'); _106(); _732() } } function _371() { _259(); _59(); _3.close() } function _731() { _17._21(_19, 'click', '.mf-tool-close', _371, { _90: true }) } function _732() { _17._21(_19, 'click', '.mf-tool-toggle', _737, { _90: true }); _17._21(_19, 'click', '.mf-tool-close', _371, { _90: true }); _17._21(_19, 'click', '.mf-tool-exclude', _738, { _90: true }); _17._21(_19, 'click', '.mf-tool-whitelist', _719, { _90: true }); _17._21(_19, 'click', '.mf-tool-track', _718, { _90: true }); _17._21(_19, 'click', '.highlight-excluded', _717, { _90: true }); _17._21(_19, 'click', '.highlight-whitelisted', _706, { _90: true }); _17._21(_19, 'click', '.highlight-tracked', _698, { _90: true }); _17._21(_19, 'click', '.mf-remove-excluded', _699, { _90: true }); _17._21(_19, 'click', '.mf-remove-whitelisted', _700, { _90: true }); _17._21(_19, 'click', '.mf-remove-tracked', _701, { _90: true }); _17._21(_19, 'submit', _702, { _90: true }); _17._21(_9, 'mouseover', _703, { _31: true }); _17._21(_9, 'mouseleave', _704, { _31: true }); _17._21(_9, 'mouseup', _705, { _31: true }); _17._21(_9, 'mouseenter', _136, { _31: true }); _17._21(_9, 'mousemove', _136, { _31: true }); _17._21(_9, 'mousedown', _136, { _31: true }); _17._21(_9, 'click', _136, { _31: true }); _17._21(_9, 'mouseout', _136, { _31: true }); _17._21(_9, 'scroll', _106, { _31: true, _195: true }); _17._21(_3, 'resize', _106, { _31: true, _195: true }); var MutationObserver = _3.MutationObserver || _3.WebKitMutationObserver || _3.MozMutationObserver; if (MutationObserver) { _295 = new MutationObserver(function (_385) { _385 = _385.filter(function (_68) { if (_68.target.nodeType !== 1 || _8._64(_68.target, '#mouseflow *')) return false; var _733 = _68.oldValue && _68.oldValue.indexOf('mf-highlight') !== -1; var _734 = _68.target.className && _68.target.className.indexOf('mf-highlight') !== -1; var _735 = _733 || _734; if (_68.type === 'attributes' && _68.attributeName === 'class' && _735) return false; return true }); if (_385.length) _106() }); _295.observe(_9, { attributes: true, childList: true, characterData: true, subtree: true, attributeOldValue: true }) } } function _736() { _17._545(); if (_295) _295.disconnect() } function _737() { _12._120 = !_12._120; _79(_12); _8._199(_19, 'tool-closed', _12._120); _8._199(_9.body, 'mf-privacy-tool-opened', !_12._120); var _296 = _19.getElementsByClassName('step')[0]; var _299 = _19.getElementsByClassName('tool-container')[0]; if (_12._120) { _8._40(_296, 'fade-out'); _8._53(_296, 'fade-in'); _8._40(_299, 'fade-in'); _8._53(_299, 'fade-out') } else { _8._40(_296, 'fade-in'); _8._53(_296, 'fade-out'); _8._40(_299, 'fade-out'); _8._53(_299, 'fade-in') } } function _738() { _12._78 = 'exclude'; _79(_12); _8._40(_19.getElementsByClassName('mf-tool-whitelist')[0], 'active'); _8._40(_19.getElementsByClassName('tool-whitelist')[0], 'active'); _8._40(_19.getElementsByClassName('mf-tool-track')[0], 'active'); _8._40(_19.getElementsByClassName('tool-track')[0], 'active'); _8._53(_19.getElementsByClassName('mf-tool-exclude')[0], 'active'); _8._53(_19.getElementsByClassName('tool-exclude')[0], 'active') } function _719() { _12._78 = 'whitelist'; _79(_12); _8._40(_19.getElementsByClassName('mf-tool-exclude')[0], 'active'); _8._40(_19.getElementsByClassName('tool-exclude')[0], 'active'); _8._40(_19.getElementsByClassName('mf-tool-track')[0], 'active'); _8._40(_19.getElementsByClassName('tool-track')[0], 'active'); _8._53(_19.getElementsByClassName('mf-tool-whitelist')[0], 'active'); _8._53(_19.getElementsByClassName('tool-whitelist')[0], 'active') } function _718() { _12._78 = 'track'; _79(_12); _8._40(_19.getElementsByClassName('mf-tool-exclude')[0], 'active'); _8._40(_19.getElementsByClassName('tool-exclude')[0], 'active'); _8._40(_19.getElementsByClassName('mf-tool-whitelist')[0], 'active'); _8._40(_19.getElementsByClassName('tool-whitelist')[0], 'active'); _8._53(_19.getElementsByClassName('mf-tool-track')[0], 'active'); _8._53(_19.getElementsByClassName('tool-track')[0], 'active') } function _717(_6) { if (_12._78 === 'exclude') { _477(_6.target.getAttribute('data-target')); _106() } } function _706(_6) { if (_12._78 === 'whitelist') { _478(_6.target.getAttribute('data-target')); _106() } } function _698(_6) { if (_12._78 === 'track') { _479(_6.target.getAttribute('data-target')); _106() } } function _699(_6) { _477(_6.target.parentNode.getAttribute('data-target')); _106() } function _700(_6) { _478(_6.target.parentNode.getAttribute('data-target')); _106() } function _701(_6) { _479(_6.target.parentNode.getAttribute('data-target')); _106() } function _702() { _712(); _707(_12._61, _12._62, _12._77, function () { _490(); _92.innerHTML = 'Saved'; _259(); _22._52(_371, 500) }, function () { _490() }) } function _703(_6) { _22._116(_510); var _509 = _9.getElementsByClassName('mf-highlight'); for (var _1 = 0; _1 < _509.length; _1++) { _8._40(_509[_1], 'mf-highlight') } _8._53(_124, 'hidden'); if (_136(_6) || _495(_6.target)) return; _8._53(_6.target, 'mf-highlight'); _510 = _22._52(function () { var _38 = _6.target.getBoundingClientRect(); _124.style.left = _38.left + _3.pageXOffset + 'px'; _124.style.top = _38.top + _3.pageYOffset + 'px'; _124.style.width = _38.width + 'px'; _124.style.height = _38.height + 'px'; _8._40(_124, 'hidden') }, 75) } function _704(_6) { if (_136(_6)) return; if (_6.target === _9) { _8._53(_124, 'hidden') } } function _705(_6) { if (_136(_6)) return; if (_6.button !== 0 || _495(_6.target)) return; _8._40(_6.target, 'mf-highlight'); var _7 = _708(_6.target); if (_12._78 === 'exclude') { _493(_7) } else if (_12._78 === 'whitelist') { _492(_7) } else { _494(_7) } _106() } function _136(_6) { if (_12._120 || _6.target.nodeType !== 1 || _8._64(_6.target, '#mouseflow *')) return true; _6.preventDefault(); _6.stopPropagation(); return false } function _495(_2) { return _2 === _9.body || _8._64(_2, 'html') || (_12._78 === 'whitelist' && (!/INPUT|TEXTAREA/.test(_2.tagName) || /checkbox|radio|button|submit/.test(_2.type))) } function _494(_7) { if (_7 && _12._77.indexOf(_7) === -1) { _12._77.unshift(_7); _79(_12) } _191() } function _493(_7) { if (_7 && _12._61.indexOf(_7) === -1) { _12._61.unshift(_7); _79(_12) } _191() } function _492(_7) { if (_7 && _12._62.indexOf(_7) === -1) { _12._62.unshift(_7); _79(_12) } _191() } function _477(_7) { if (_7 && _12._61.indexOf(_7) !== -1) { _12._61 = _12._61.filter(function (_167) { return _167 !== _7 }); _79(_12) } _191() } function _478(_7) { if (_7 && _12._62.indexOf(_7) !== -1) { _12._62 = _12._62.filter(function (_167) { return _167 !== _7 }); _79(_12) } _191() } function _479(_7) { if (_7 && _12._77.indexOf(_7) !== -1) { _12._77 = _12._77.filter(function (_167) { return _167 !== _7 }); _79(_12) } _191() } function _106() { _22._116(_168); if (!_168) { _22._52(function () { if (_168) { _22._116(_168); _480(); _168 = undefined } }, 200) } _168 = _22._52(function () { _480(); _168 = undefined }, 100) } function _480() { var _481 = _19.querySelectorAll('.highlight-excluded,.highlight-whitelisted,.highlight-tracked'), _1; for (_1 = 0; _1 < _481.length; _1++) { _19.removeChild(_481[_1]) } _12._61.forEach(function (_7) { var _97 = _9.querySelectorAll(_7); for (_1 = 0; _1 < _97.length; _1++) { _19.appendChild(_740(_7, _97[_1].getBoundingClientRect())) } }); _12._62.forEach(function (_7) { var _97 = _9.querySelectorAll(_7); for (_1 = 0; _1 < _97.length; _1++) { _19.appendChild(_741(_7, _97[_1].getBoundingClientRect())) } }); _12._77.forEach(function (_7) { var _97 = _9.querySelectorAll(_7); for (_1 = 0; _1 < _97.length; _1++) { _19.appendChild(_742(_7, _97[_1].getBoundingClientRect())) } }) } function _707(_61, _62, _77, _118, _716) { if (_126) { _10('Attempted to save CSS lists while previous save was in progress'); return } _126 = _118; _98 = _716; _714(); _246.postMessage({ message: 'MouseflowPrivacyTool_Save', blacklist: _61, whitelist: _62, tracked: _77 }, '*'); _22._52(function () { if (_126 === _118) { _10('Saving CSS lists timed out'); if (_98) _98(); _126 = undefined; _98 = undefined; _388('Uh oh! We couldn\'t save your changes.<br><br>' + 'Please log into Mouseflow and try again.') } }, 7500) } function _708(_2) { if (_2 == null) return null; try { return _484(_2); } catch (ex) { _10('Could not get element selector: ' + ex.message); return null } } function _876(_2) { var _240 = _709(_2); if (!_240) return null; if (_8._64(_2, _240)) return _240; var _121 = document.querySelector(_240); var _104 = _2; var _50 = []; while (_104 && _104 !== _121) { var _33 = _419(_104); if (_33.length === 0) _33.push(_485(_104)); _50.unshift(_33); _104 = _104.parentNode } _50.unshift(_240); return _410(_50) } function _484(_2, _50) { if (!_50) _50 = []; var _33 = _419(_2); _50.unshift(_33); var _7 = _410(_50); if (_7) return _7; if (_33.length === 0) { _33.push(_485(_2)); _7 = _410(_50); if (_7) return _7 } return _484(_2.parentNode, _50) } function _410(_50) { var _415 = _50.length > 1 ? _710.apply(this, _50) : _50[0]; for (var _1 = 0; _1 < _415.length; _1++) { if (_9.querySelectorAll(_415[_1]).length === 1) return _415[_1] } return null } function _709(_2) { var _104 = _2; while (_104) { var _33 = _419(_104); for (var _1 = 0; _1 < _33.length; _1++) { if (_9.querySelectorAll(_33[_1]).length === 1) return _33[_1] } _104 = _104.parentNode } return null } function _419(_2) { if (_2 === _9.body) return ['body']; var _33 = []; var _406 = _2.parentNode; var _1; var _49 = _2.getAttribute('id'); var _7 = '#' + _8._137(_49); if (_49 && _9.querySelectorAll(_7).length === 1 && !_8._139(_2, 'data-mf-ignore-child-ids')) return [_7]; var _25 = _2.getAttribute('name'); _7 = '[name="' + _8._137(_25) + '"]'; if (_25) { if (_9.querySelectorAll(_7).length === 1) return [_7]; if (_406.querySelectorAll(_7).length === 1) _33.push(_7) } var _80 = _8._148(_2); for (_1 = 0; _1 < _80.length; _1++) { _7 = '.' + _8._137(_80[_1]); if (_9.querySelectorAll(_7).length === 1) return [_7]; if (_406.querySelectorAll(_7).length === 1) _33.push(_7) } for (_1 = 0; _1 < _80.length; _1++) { _7 = _8._137(_2.tagName.toLowerCase()) + '.' + _8._137(_80[_1]); if (_9.querySelectorAll(_7).length === 1) return [_7]; if (_406.querySelectorAll(_7).length === 1) _33.push(_7) } return _33 } function _485(_2) { var _7 = _8._137(_2.tagName.toLowerCase()); if (_2.parentNode.querySelectorAll(_7).length === 1) return _7; var _179 = 0; var _291 = _2; while (_291) { if (_291.tagName === _2.tagName) _179++; _291 = _291.previousElementSibling } _7 += ':nth-of-type(' + _179 + ')'; return _7 } function _710() { var _33, _178, _177, _1; var _100 = 0; var _145 = arguments.length - 1; var _298 = false; var _235 = true; while (_100 < _145) { _178 = undefined; for (_1 = 0; _1 <= _100; _1++) { _178 = _178 ? _294(_178, arguments[_1], ' > ') : arguments[_1] } _177 = undefined; for (_1 = arguments.length - 1; _1 >= _145; _1--) { _177 = _177 ? _294(arguments[_1], _177, ' > ') : arguments[_1] } var _292 = (_100 + 1) == _145 ? ' > ' : ' '; _33 = _33 ? _33.concat(_294(_178, _177, _292)) : _294(_178, _177, _292); if (_235 && _298) { _145--; _298 = false; _235 = true } else if (_235) { _145--; _298 = true; _235 = false } else { _100++; if (_100 != _145) _145++; _298 = true; _235 = true } } return _33 } function _294(_486, _487, _292) { var _33 = []; for (var _1 = 0; _1 < _486.length; _1++) { for (var _51 = 0; _51 < _487.length; _51++) { _33.push(_486[_1] + _292 + _487[_51]) } } return _33 } function _711() { var _4 = _3.localStorage.getItem('mf_privacyTool'); return _4 ? _8._149(_4) : null } function _79(_36) { _36 = _36 ? _8._69(_36) : ''; _3.localStorage.setItem('mf_privacyTool', _36) } function _259() { _3.localStorage.removeItem('mf_privacyTool') } function _712() { _92.setAttribute('disabled', ''); _92.setAttribute('original-html', _92.innerHTML); _92.innerHTML = '<i>&bull;</i> <i>&bull;</i> <i>&bull;</i> <i>&bull;</i>'; _8._53(_92, 'loading') } function _490() { _8._40(_92, 'loading'); _92.innerHTML = _92.getAttribute('original-html'); _92.removeAttribute('original-html'); _92.removeAttribute('disabled') } function _191() { _491.innerHTML = _769(_12._61); _503.innerHTML = _770(_12._62); _514.innerHTML = _771(_12._77); _127.innerHTML = _369(_12._61, _12._62, _12._77); _8._40(_127, 'red') } function _713(_147) { if (!_274) return; _274.innerHTML = _147; _8._53(_274, 'red') } function _388(_147) { if (!_127) return; _127.innerHTML = _147; _8._53(_127, 'red') } function _714() { if (!_127) return; _127.innerHTML = _369(_12._61, _12._62, _12._77); _8._40(_127, 'red') } function _715(_12) { var _29 = _9.createElement('div'); _29.className = 'privacy-tool is-loading'; _29.innerHTML = _766(_12); if (_12._120) _29.className += ' tool-closed'; var _154 = _9.createElement('style'); _154.type = 'text/css'; _154.innerHTML = _772(); _29.appendChild(_154); return _29 } function _739() { var _29 = _9.createElement('div'); _29.className = 'highlight-box'; return _29 } function _740(_7, _38) { var _29 = _9.createElement('div'); _29.className = 'highlight-box highlight-excluded'; _29.setAttribute('data-target', _7); _29.style.left = _38.left + _3.pageXOffset + 'px'; _29.style.top = _38.top + _3.pageYOffset + 'px'; _29.style.width = _38.width + 'px'; _29.style.height = _38.height + 'px'; return _29 } function _741(_7, _38) { var _29 = _9.createElement('div'); _29.className = 'highlight-box highlight-whitelisted'; _29.setAttribute('data-target', _7); _29.style.left = _38.left + _3.pageXOffset + 'px'; _29.style.top = _38.top + _3.pageYOffset + 'px'; _29.style.width = _38.width + 'px'; _29.style.height = _38.height + 'px'; return _29 } function _742(_7, _38) { var _29 = _9.createElement('div'); _29.className = 'highlight-box highlight-tracked'; _29.setAttribute('data-target', _7); _29.style.left = _38.left + _3.pageXOffset + 'px'; _29.style.top = _38.top + _3.pageYOffset + 'px'; _29.style.width = _38.width + 'px'; _29.style.height = _38.height + 'px'; return _29 } function _766(_12) { return ('<form action="#" id="mf_privacy_tool">' + _767(_12) + _768(_12) + '</form>') } function _767(_12) { return ('<div class="step step-block' + (_12._120 ? ' fade-in' : '') + '">' + '<div class="widget-header">' + '<div class="widget-text">Open Privacy Tool</div>' + '<div class="widget-toggle">' + '<a href="#" class="btn-arrow btn-arrow--up mf-tool-toggle"></a>' + '</div>' + '</div>' + '</div>') } function _768() { return ('<div class="tool-container' + (_12._120 ? '' : ' fade-in') + '">' + '<div class="tool-header">' + '<img class="logo" alt="Mouseflow" src="https://mouseflow.com/static/img/logo-light.png">' + '<div class="tool-toggle">' + '<div class="tool-toggle-text">' + 'Hide to navigate' + '</div>' + '<div class="tool-toggle-icon">' + '<a href="#" class="btn-arrow btn-arrow--down mf-tool-toggle"></a>' + '</div>' + '</div>' + '<div class="tool-close">' + '<div class="tool-toggle-text">' + 'Close' + '</div>' + '<div class="tool-toggle-icon">' + '<a href="#" class="btn-cross mf-tool-close"></a>' + '</div>' + '</div>' + '</div>' + '<div class="tool-content">' + '<ul class="tool-menu">' + '<li class="tool-menu-item mf-tool-exclude' + (_12._78 === 'exclude' ? ' active' : '') + '">' + 'Excluded content' + '</li>' + '<li class="tool-menu-item mf-tool-whitelist' + (_12._78 === 'whitelist' ? ' active' : '') + '">' + 'Whitelisted fields' + '</li>' + '<li class="tool-menu-item mf-tool-track' + (_12._78 === 'track' ? ' active' : '') + '">' + 'Tracked elements' + '</li>' + '</ul>' + '<div class="tool-exclude' + (_12._78 === 'exclude' ? ' active' : '') + '">' + '<h2>Exclude content from appearing in Mouseflow</h2>' + '<p>' + 'To get started, just click the element(s) or content you wish to exclude. ' + 'This will add the necessary CSS selectors to be blocked in the list below.' + '</p>' + '<p>' + 'When you\'re finished, click "Hide to navigate" to browse to another page to exclude additional content, or click "Save and close" to keep your changes.' + '</p>' + '<p>' + 'For more details and best practices, read our <a href="http://help.mouseflow.com/knowledge_base/topics/exclude-or-replace-content-on-pages" class="green" target="_315">Support Guide</a>.' + '</p>' + '<h3>Excluded content:</h3>' + '<div>' + '<output></output>' + '</div>' + '</div>' + '<div class="tool-whitelist' + (_12._78 === 'whitelist' ? ' active' : '') + '">' + '<h2>Whitelist input fields</h2>' + '<p>' + 'You can whitelist any input field or text area, simply by clicking the field(s) on the page. ' + 'This will let Mouseflow record input in that field.' + '</p>' + '<p>' + 'When you\'re finished, click "Hide to navigate" to browse to another page to exclude additional content, or click "Save and close" to keep your changes.' + '</p>' + '<p>' + 'For more details and best practices, read our <a href="http://help.mouseflow.com/knowledge_base/topics/exclude-or-replace-content-on-pages" class="green" target="_315">Support Guide</a>.' + '</p>' + '<h3>Whitelisted fields:</h3>' + '<div>' + '<output></output>' + '</div>' + '</div>' + '<div class="tool-track' + (_12._78 === 'track' ? ' active' : '') + '">' + '<h2>Tracked elements</h2>' + '<p>' + 'When viewing a heatmap, most of your links will include a box that shows additional metrics(clicks, hovers, etc.).In some cases, these boxes will not appear.' + '</p>' + '<p>' + 'If you\'ve found such an element, you can select it here. That will ensure the additional metrics are shown in your heatmaps.' + '</p>' + '<p>' + 'When you\'re finished, click "Hide to navigate" to browse to another page to exclude additional content, or click "Save and close" to keep your changes.' + '</p>' + '<p>' + 'For more details and best practices, read our <a href="http://help.mouseflow.com/knowledge_base/topics/exclude-or-replace-content-on-pages" class="green" target="_315">Support Guide</a>.' + '</p>' + '<h3>Tracked elements:</h3>' + '<div>' + '<output></output>' + '</div>' + '</div>' + '<div class="tool-status">' + '<div class="tool-status-text">' + _369(_12._61, _12._62, _12._77) + '</div>' + '<div class="tool-status-buttons">' + '<button type="submit" class="btn-widget">Save and close</button>' + '<a href="#" class="green bold mf-tool-close">Close Privacy Tool</a>' + '</div>' + '</div>' + '<div class="tool-loading">' + '<h2 class="loading">Loading the Privacy Tool<i>.</i><i>.</i><i>.</i></h2>' + '</div>' + '<div class="tool-message">' + '<h3>Browser window is to small to load the Privacy Tool</h3>' + '<p>To use Mouseflow\'s Privacy Tool, you need to view the page in a larger browser window.</p>' + '</div>' + '</div>' + '</div>') } function _769(_50) { return _50.map(function (_7) { return ('<div class="tm-tag" data-target="' + _8._144(_7) + '">' + _8._144(_7) + '<a href="#" class="btn-cross mf-remove-excluded"></a>' + '</div>') }).join('') } function _770(_50) { return _50.map(function (_7) { return ('<div class="tm-tag" data-target="' + _8._144(_7) + '">' + _8._144(_7) + '<a href="#" class="btn-cross mf-remove-whitelisted"></a>' + '</div>') }).join('') } function _771(_50) { return _50.map(function (_7) { return ('<div class="tm-tag" data-target="' + _8._144(_7) + '">' + _8._144(_7) + '<a href="#" class="btn-cross mf-remove-tracked"></a>' + '</div>') }).join('') } function _369(_61, _62, _537) { return '<p>You have:</p>' + '<p>' + '&nbsp;&bull; excluded <i class="green"> ' + _61.length + '</i> ' + (_61.length === 1 ? 'element' : 'elements') + '<br>' + '&nbsp;&bull; whitelisted <i class="green">' + _62.length + '</i> input ' + (_62.length === 1 ? 'field' : 'fields') + '<br>' + '&nbsp;&bull; tracked <i class="green">' + _537.length + '</i> input ' + (_537.length === 1 ? 'element' : 'elements') + '</p>' } function _772() { return ('.mf-highlight {' + 'cursor: pointer !important;' + '}' + '.mf-privacy-tool-opened iframe {' + 'pointer-events: none;' + '}' + '#mouseflow .highlight-box {' + 'background-color: #add8e6;' + 'border: 2px dotted #808080;' + 'position: absolute;' + 'border-radius: 2px;' + 'z-index: 2147483646;' + 'cursor: pointer;' + 'pointer-events: none;' + 'opacity: 0.5;' + '-webkit-transition: opacity .075s linear;' + 'transition: opacity .075s linear;' + '}' + '#mouseflow .highlight-box.hidden,' + '#mouseflow .tool-closed .highlight-box {' + 'opacity: 0;' + '}' + '#mouseflow .highlight-box.highlight-excluded {' + 'background-color: #ffb6c1;' + 'pointer-events: initial;' + '}' + '#mouseflow .highlight-box.highlight-whitelisted {' + 'background-color: #90ee90;' + 'pointer-events: initial;' + '}' + '#mouseflow .highlight-box.highlight-tracked {' + 'background-color: orange;' + 'pointer-events: initial;' + '}' + '#mouseflow .tool-closed .highlight-box.highlight-excluded,' + '#mouseflow .tool-closed .highlight-box.highlight-whitelisted,' + '#mouseflow .tool-closed .highlight-box.highlight-tracked {' + 'pointer-events: none;' + '}' + '#mouseflow .widget-header,' + '#mouseflow .btn-widget {' + 'background: #4cb377;' + '}' + '#mouseflow .widget-text,' + '#mouseflow .btn-widget,' + '#mouseflow .btn-arrow,' + '#mouseflow .btn-cross {' + 'color: #fff;' + '}' + '#mouseflow .tm-tag {' + 'margin: 7px 7px 0 0;' + 'padding: 7px;' + 'display: inline-block;' + 'border-radius: 3px;' + 'background-color: #a7a7a7;' + 'color: white;' + 'font-size: 13px;' + '}' + '#mouseflow .step {' + 'visibility: hidden;' + 'opacity: 0;' + 'position: fixed;' + 'bottom: 30px;' + 'right: 30px;' + 'z-index: 2147483647;' + 'width: 300px;' + 'border-radius: 10px;' + 'box-shadow: 0 0 15px rgba(0, 0, 0, .35);' + 'overflow: hidden;' + '}' + '#mouseflow a:hover {' + 'text-decoration: underline;' + '}' + '#mouseflow h2 {' + 'font-size: 21px;' + 'font-weight: 700;' + 'line-height: 1.4em;' + 'margin-bottom: 6px;' + '}' + '#mouseflow h3 {' + 'font-size: 16px;' + 'font-weight: 700;' + 'line-height: 1.4em;' + '}' + '#mouseflow p {' + 'margin-bottom: 8px;' + 'line-height: 1.4em;' + '}' + '#mouseflow .green {' + 'color: #47b475;' + '}' + '#mouseflow .red {' + 'color: #ea1e1e;' + '}' + '#mouseflow .bold {' + 'font-weight: 700;' + '}' + '#mouseflow .tool-container {' + 'visibility: visible;' + 'opacity: 0;' + 'position: fixed;' + 'bottom: 0;' + 'left: 0;' + 'width: 100%;' + 'height: 350px;' + 'max-height: 40%;' + 'overflow: hidden;' + 'background-color: white;' + 'border-top: 2px solid #37312f;' + 'z-index: 2147483647;' + '}' + '#mouseflow .tool-header {' + 'background-color: #47403e;' + 'height: 58px;' + '}' + '#mouseflow .logo {' + 'display: inline;' + 'height: 40px;' + 'margin: 9px 10px;' + '}' + '#mouseflow .tool-toggle,' + '#mouseflow .tool-close {' + 'float: right;' + 'padding: 18px 24px;' + '}' + '#mouseflow .is-loading .tool-close {' + 'display: block;' + '}' + '#mouseflow .is-loading .tool-toggle,' + '#mouseflow .tool-close {' + 'display: none;' + '}' + '#mouseflow .tool-toggle-text {' + 'display: inline-block;' + 'color: white;' + 'font-size: 18px;' + '}' + '#mouseflow .tool-toggle-icon {' + 'width: 30px;' + 'display: inline-block;' + 'position: relative;' + 'top: 2px;' + '}' + '#mouseflow .tool-close .tool-toggle-icon {' + 'top: 4px;' + '}' + '#mouseflow .tool-content {' + 'height: calc(100% - 58px);' + '}' + '#mouseflow .tool-menu {' + 'width: 15%;' + 'height: 100%;' + 'float: left;' + '}' + '#mouseflow .tool-menu-item {' + 'background-color: #f8f8f8;' + 'color: black;' + 'cursor: pointer;' + 'height: 40px;' + 'padding: 12px;' + '}' + '#mouseflow .tool-menu-item.active {' + 'position: relative;' + 'background-color: #4db378;' + 'color: white;' + 'cursor: default;' + '}' + '#mouseflow .tool-menu-item.active:after {' + 'display: block;' + 'border: solid transparent;' + 'content: " ";' + 'position: absolute;' + 'pointer-events: none;' + 'border-left-color: #4db378;' + 'border-width: 20px;' + 'top: 0;' + 'right: -40px;' + '}' + '#mouseflow .tool-menu-item:not(.active):hover {' + 'background-color: #e4e4e4' + '}' + '#mouseflow .tool-exclude,' + '#mouseflow .tool-whitelist,' + '#mouseflow .tool-track {' + 'display: none;' + 'width: 70%;' + 'height: 100%;' + 'float: left;' + 'color: rgb(71, 64, 62);' + 'overflow-y: auto;' + 'overflow-x: hidden;' + 'padding: 10px 40px;' + '}' + '#mouseflow .tool-exclude.active,' + '#mouseflow .tool-whitelist.active,' + '#mouseflow .tool-track.active {' + 'display: block;' + '}' + '#mouseflow .tool-exclude::-webkit-scrollbar,' + '#mouseflow .tool-whitelist::-webkit-scrollbar,' + '#mouseflow .tool-track::-webkit-scrollbar {' + 'width: 8px;' + '}' + '#mouseflow .tool-exclude::-webkit-scrollbar-track,' + '#mouseflow .tool-whitelist::-webkit-scrollbar-track,' + '#mouseflow .tool-track::-webkit-scrollbar-track {' + 'border-radius: 10px;' + 'background-color: #F5F5F5;' + '-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);' + '}' + '#mouseflow .tool-exclude::-webkit-scrollbar-thumb,' + '#mouseflow .tool-whitelist::-webkit-scrollbar-thumb,' + '#mouseflow .tool-track::-webkit-scrollbar-thumb {' + 'border-radius: 10px;' + 'background-color: #a7a7a7;' + '-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);' + '}' + '#mouseflow .tool-status {' + 'width: 15%;' + 'background-color: #f8f8f8;' + 'height: 100%;' + 'float: left;' + 'position: relative;' + '}' + '#mouseflow .tool-status-text {' + 'font-size: 16px;' + 'font-weight: 700;' + 'text-align: left;' + 'padding: 0 15px;' + 'position: absolute;' + 'top: 40px;' + '}' + '#mouseflow .tool-status-buttons {' + 'width: 100%;' + 'text-align: center;' + 'position: absolute;' + 'padding: 0 30px;' + 'bottom: 40px;' + '}' + '#mouseflow .tool-loading {' + 'width: 100%;' + 'height: calc(100% - 58px);' + 'background-color: white;' + 'color: rgb(71, 64, 62);' + 'position: absolute;' + 'top: 58px;' + 'z-index: 2;' + 'visibility: hidden;' + 'opacity: 0;' + '-webkit-animation: fadeOut .3s linear;' + 'animation: fadeOut .3s linear;' + '}' + '#mouseflow .is-loading .tool-loading {' + 'visibility: visible;' + 'opacity: 1;' + '-webkit-animation: fadeIn .3s linear;' + 'animation: fadeIn .3s linear;' + '}' + '#mouseflow .tool-loading h2 {' + 'position: absolute;' + 'left: 50%;' + 'top: 50%;' + '-webkit-transform: translate(-50%, -50%);' + '-ms-transform: translate(-50%, -50%);' + 'transform: translate(-50%, -50%);' + '}' + '#mouseflow .widget-header {' + 'color: #fff;' + 'padding: 12px 15px;' + 'vertical-align: middle;' + 'overflow: hidden;' + 'position: relative;' + 'z-index: 1;' + '}' + '#mouseflow .widget-header:before {' + 'content: "";' + 'display: inline;' + 'position: absolute;' + 'top: 0;' + 'left: 0;' + 'right: 0;' + 'bottom: 0;' + 'background: rgba(0, 0, 0, .3);' + 'opacity: 0;' + 'z-index: -1;' + '-webkit-transition: opacity .3s linear;' + 'transition: opacity .3s linear;' + '}' + '#mouseflow .widget-header:hover:before {' + 'opacity: 1;' + '}' + '#mouseflow .widget-text {' + 'font-size: 16px;' + 'line-height: 20px;' + 'width: 245px;' + 'display: inline-block;' + 'vertical-align: middle;' + '}' + '#mouseflow .widget-toggle {' + 'width: 20px;' + 'display: inline-block;' + 'vertical-align: middle;' + 'margin: 0;' + '}' + '#mouseflow .btn-arrow,' + '#mouseflow .btn-cross {' + 'float: right;' + 'z-index: 10;' + 'line-height: .5;' + '}' + '#mouseflow .tool-toggle-icon .btn-arrow,' + '#mouseflow .tool-toggle-icon .btn-cross {' + 'font-size: 34px;' + '}' + '#mouseflow .widget-toggle .btn-arrow {' + 'font-size: 25px;' + '}' + '#mouseflow .tm-tag .btn-cross {' + 'margin: 3px 0 0 7px;' + 'font-weight: 700;' + 'color: #4e4e4e;' + 'font-size: 18px;' + '}' + '#mouseflow .widget-toggle .btn-arrow:hover {' + 'text-shadow: -3px 0 2px rgba(0, 0, 0, .5);' + '}' + '#mouseflow .tm-tag .btn-cross:hover {' + 'color: #c66;' + '}' + '#mouseflow .btn-arrow--up {' + '-webkit-transform: rotate(-90deg) scale(1.5, 1.5);' + '-ms-transform: rotate(-90deg) scale(1.5, 1.5);' + 'transform: rotate(-90deg) scale(1.5, 1.5);' + '}' + '#mouseflow .btn-arrow--down {' + '-webkit-transform: rotate(+90deg) scale(1.5, 1.5);' + '-ms-transform: rotate(+90deg) scale(1.5, 1.5);' + 'transform: rotate(+90deg) scale(1.5, 1.5);' + '}' + '#mouseflow .widget-toggle .btn-arrow:before {' + 'content: "";' + 'display: inline;' + 'position: absolute;' + 'top: -185px;' + 'left: -15px;' + 'right: -15px;' + 'bottom: -15px;' + 'display: block;' + '}' + '#mouseflow .tool-toggle-icon .btn-arrow:before {' + 'content: "";' + 'display: inline;' + 'position: absolute;' + 'top: -10px;' + 'left: -15px;' + 'right: -15px;' + 'bottom: -100px;' + 'display: block;' + '}' + '#mouseflow .tool-toggle-icon .btn-cross:before {' + 'content: "";' + 'display: inline;' + 'position: absolute;' + 'top: -25px;' + 'left: -150px;' + 'right: -20px;' + 'bottom: -20px;' + 'display: block;' + '}' + '#mouseflow .btn-arrow:after {' + 'content: "\\203a";' + 'display: inline;' + '}' + '#mouseflow .btn-cross:after {' + 'content: "\\00d7";' + 'display: inline;' + '}' + '#mouseflow .btn-arrow:hover,' + '#mouseflow .btn-cross:hover {' + 'text-decoration: none;' + '}' + '#mouseflow .btn-widget {' + 'width: 100%;' + 'height: 38px;' + 'border: none;' + 'border-radius: 6px;' + 'overflow: hidden;' + 'position: relative;' + 'z-index: 1;' + 'cursor: pointer;' + 'display: block;' + 'padding: 10px;' + 'font-size: 16px;' + 'font-family: inherit;' + 'font-weight: bold;' + 'text-align: center;' + 'outline: none;' + 'margin-bottom: 10px;' + '}' + '#mouseflow .btn-widget:before {' + 'content: "";' + 'display: inline;' + 'position: absolute;' + 'top: 0;' + 'left: 0;' + 'right: 0;' + 'bottom: 0;' + 'background: rgba(0, 0, 0, .3);' + 'opacity: 0;' + 'z-index: -1;' + '-webkit-transition: opacity .3s linear;' + 'transition: opacity .3s linear;' + '}' + '#mouseflow .btn-widget:hover {' + 'text-decoration: none;' + '}' + '#mouseflow .btn-widget:hover:before {' + 'opacity: 1;' + '}' + '#mouseflow .privacy-tool {' + 'height: 350px;' + 'max-height: 40%;' + '-webkit-transition: height .5s ease-out;' + 'transition: height .5s ease-out;' + '}' + '#mouseflow .privacy-tool.tool-closed {' + 'height: 0;' + '}' + '#mouseflow .tool-closed .step {' + 'visibility: visible;' + '}' + '#mouseflow .tool-closed .tool-container {' + 'visibility: hidden;' + '}' + '#mouseflow .step.fade-in,' + '#mouseflow .tool-container.fade-in {' + '-webkit-animation: fadeUpIn .8s cubic-bezier(0, 0, 0, 1) both;' + 'animation: fadeUpIn .8s cubic-bezier(0, 0, 0, 1) both;' + '}' + '#mouseflow .step.fade-out,' + '#mouseflow .tool-container.fade-out {' + '-webkit-animation: fadeDownOut .8s cubic-bezier(0, 0, 0, 1);' + 'animation: fadeDownOut .8s cubic-bezier(0, 0, 0, 1);' + '}' + '#mouseflow .btn-widget.loading {' + 'cursor: default;' + '}' + '#mouseflow .btn-widget.loading:before {' + 'display: none;' + '}' + '#mouseflow .loading i {' + 'animation-name: blink;' + 'animation-duration: 1.4s;' + 'animation-iteration-count: infinite;' + 'animation-fill-mode: both;' + '}' + '#mouseflow .loading i:nth-child(2) {' + 'animation-delay: .2s;' + '}' + '#mouseflow .loading i:nth-child(3) {' + 'animation-delay: .4s;' + '}' + '#mouseflow .loading i:nth-child(4) {' + 'animation-delay: .6s;' + '}' + '#mouseflow .tool-message {' + 'width: 100%;' + 'height: calc(100% - 58px);' + 'background-color: white;' + 'color: rgb(71, 64, 62);' + 'position: absolute;' + 'top: 58px;' + 'z-index: 3;' + 'padding: 20px;' + 'overflow-y: auto;' + 'overflow-x: hidden;' + 'visibility: hidden;' + 'opacity: 0;' + '-webkit-animation: fadeOut .3s linear;' + 'animation: fadeOut .3s linear;' + '}' + '#mouseflow .tool-message h3 {' + 'margin-bottom: 20px;' + '}' + '@media (max-width: 1300px) {' + '#mouseflow .tool-exclude,' + '#mouseflow .tool-whitelist,' + '#mouseflow .tool-track {' + 'width: 60%;' + '}' + '#mouseflow .tool-status {' + 'width: 25%;' + '}' + '#mouseflow .tool-status-buttons {' + 'bottom: 10px;' + '}' + '}' + '@media (max-width: 850px) {' + '#mouseflow .tool-menu-item {' + 'height: 56px;' + '}' + '#mouseflow .tool-menu-item.active:after {' + 'border-width: 28px;' + 'top: 0px;' + 'right: -56px;' + '}' + '#mouseflow .tool-status-text {' + 'font-size: 14px;' + '}' + '#mouseflow .btn-widget {' + 'font-size: 12px;' + '}' + '#mouseflow a.mf-tool-close {' + 'font-size: 12px;' + '}' + '}' + '@media (max-height: 800px) {' + '#mouseflow .tool-status-text {' + 'top: 20px;' + '}' + '#mouseflow .tool-status-buttons {' + 'bottom: 20px;' + '}' + '}' + '@media (max-height: 650px) {' + '#mouseflow .tool-status-text {' + 'font-size: 14px;' + '}' + '}' + '@media (max-width: 650px), (max-height: 600px) {' + '#mouseflow .tool-message {' + 'visibility: visible;' + 'opacity: 1;' + '-webkit-animation: fadeIn .3s linear;' + 'animation: fadeIn .3s linear;' + '}' + '}' + '@-webkit-keyframes fadeUpIn {' + '0% {' + '-webkit-transform: translateY(50px);' + '-ms-transform: translateY(50px);' + 'transform: translateY(50px);' + 'opacity: 0;' + '}' + '100% {' + '-webkit-transform: translateY(0);' + '-ms-transform: translateY(0);' + 'transform: translateY(0);' + 'opacity: 1;' + '}' + '}' + '@keyframes fadeUpIn {' + '0% {' + '-webkit-transform: translateY(50px);' + '-ms-transform: translateY(50px);' + 'transform: translateY(50px);' + 'opacity: 0;' + '}' + '100% {' + '-webkit-transform: translateY(0);' + '-ms-transform: translateY(0);' + 'transform: translateY(0);' + 'opacity: 1;' + '}' + '}' + '@-webkit-keyframes fadeDownOut {' + '0% {' + 'visibility: visible;' + '-webkit-transform: translateY(0);' + '-ms-transform: translateY(0);' + 'transform: translateY(0);' + 'opacity: 1;' + '}' + '100% {' + 'visibility: hidden;' + '-webkit-transform: translateY(50px);' + '-ms-transform: translateY(50px);' + 'transform: translateY(50px);' + 'opacity: 0;' + '}' + '}' + '@keyframes fadeDownOut {' + '0% {' + 'visibility: visible;' + '-webkit-transform: translateY(0);' + '-ms-transform: translateY(0);' + 'transform: translateY(0);' + 'opacity: 1;' + '}' + '100% {' + 'visibility: hidden;' + '-webkit-transform: translateY(50px);' + '-ms-transform: translateY(50px);' + 'transform: translateY(50px);' + 'opacity: 0;' + '}' + '}' + '@-webkit-keyframes fadeIn {' + '0% {' + 'visibility: visible;' + 'opacity: 0;' + '}' + '100% {' + 'visibility: visible;' + 'opacity: 1;' + '}' + '}' + '@keyframes fadeIn {' + '0% {' + 'visibility: visible;' + 'opacity: 0;' + '}' + '100% {' + 'visibility: visible;' + 'opacity: 1;' + '}' + '}' + '@-webkit-keyframes fadeOut {' + '0% {' + 'visibility: visible;' + 'opacity: 1;' + '}' + '100% {' + 'visibility: hidden;' + 'opacity: 0;' + '}' + '}' + '@keyframes fadeOut {' + '0% {' + 'visibility: visible;' + 'opacity: 1;' + '}' + '100% {' + 'visibility: hidden;' + 'opacity: 0;' + '}' + '}' + '@keyframes blink {' + '0% {' + 'opacity: .2;' + '}' + '20% {' + 'opacity: 1;' + '}' + '100% {' + 'opacity: .2;' + '}' + '}') } this._41 = _41; this._59 = _59 } function _756(_14, _335, _345) { function _293() { var _54 = (_14.path || _14.location.pathname).toLowerCase(); var _192 = _14.location.search.toLowerCase(); if (_54 !== '/' && _54.slice(-1) === '/') _54 = _54.slice(0, -1); return _773(_54) || _54 + _774(_192) } function _773(_54) { return _335.filter(function (_63) { return _776(_54, _63) }).map(function (_63) { return _777(_54, _63) })[0] } function _774(_192) { if (_192[0] === '?') _192 = _192.slice(1); var _119; var _374 = []; var _775 = /([^&=]+)=?([^&]*)/g; while (_119 = _775.exec(_192)) { var _47 = _345.indexOf(_119[1]); if (_119[2] && _47 > -1) _374[_47] = _119[0] } return _374.length ? '?' + _374.filter(hasValue).join('&') : '' } function _776(_54, _63) { var _540 = _54.indexOf('?'); if (_540 > -1) _54 = _54.slice(0, _540); switch (_63._18) { case 'equals': return _54 === _63._4.toLowerCase(); case 'startsWith': return _54.indexOf(_63._4.toLowerCase()) === 0; case 'endsWith': return _54.indexOf(_63._4.toLowerCase()) === _54.length - _63._4.length; case 'regex': return new RegExp(_63._4).test(_54); default: return false } } function _777(_54, _63) { if (_63._778) return _63._778; switch (_63._18) { case 'startsWith': return _63._4 + '*'; case 'endsWith': return '*' + _63._4; default: return _63._4 } } function hasValue(value) { return value } this._293 = _293 } function _755(_8) { var _367 = []; function _779(_42, _5, _83, _386, _15) { var _31 = !!_15._31; var _543 = function (_6) { if (_83) { _6.delegatedTarget = _551(_6.target, _83); if (!_6.delegatedTarget && !_15._541) return; if (_15._195 && _6.target !== _6.delegatedTarget) return } else if (_15._195 && _6.target !== _42) { return } if (_15._90) _6.preventDefault(); if (_15._877) _6.stopPropagation(); _386.apply(this, arguments) }; _42.addEventListener(_5, _543, { capture: _31 }); _367.push({ _42: _42, _5: _5, _386: _543, _31: _31 }) } function _780() { _367.forEach(function (_17) { _17._42.removeEventListener(_17._5, _17._386, { capture: _17._31 }) }); _367 = [] } function _551(_42, _83) { if (!_83) return null; if (_8._64(_42, _83)) return _42; if (!_42.parentNode) return null; return _551(_42.parentNode, _83) } this._21 = function (_42, _5, _83, _221, _15) { if (typeof _83 === 'function') { _15 = _221; _221 = _83; _83 = null } _779(_42, _5, _83, _221, _15 || {}) }; this._545 = _780 } function _754(_14, _8) { function _364(_138) { if (!_138 || !_138.length) return true; _138 = _138.filter(function (_70) { return _70 && _70._18 && _70._4 }); var _547 = _138.filter(function (_70) { return _70._18.indexOf('not') !== 0 }); var _782 = _547.length === 0 || _547.some(function (_70) { return _193(_70) }); var _548 = _138.filter(function (_70) { return _70._18.indexOf('not') === 0 }); var _781 = _548.length === 0 || _548.every(function (_70) { return _193(_70) }); return _781 && _782 } function _193(_70) { var _28 = _14.path || _14.location.pathname; var _18 = _70._18 || ''; var _4 = _70._4 || ''; switch (_18.toLowerCase()) { case 'equals': _28 = _8._197(_28, '/').toLowerCase(); _4 = _8._197(_4, '/').toLowerCase(); return _28 === _4; case 'startswith': _28 = _28.toLowerCase(); _4 = _4.toLowerCase(); return _28.indexOf(_4) === 0; case 'endswith': _28 = _8._197(_28, '/').toLowerCase(); _4 = _8._197(_4, '/').toLowerCase(); return _28.indexOf(_4) !== -1 && _28.indexOf(_4) === _28.length - _4.length; case 'regex': return new RegExp(_4).test(_28); case 'notequals': case 'notstartswith': case 'notendswith': return !_193({ _18: _18.slice(3), _4: _4 }); default: return true } } this._364 = _364; this._193 = _193 } function _750(_3, _320, _321) { var _81 = _3.location; function _534(_16) { var _64 = (_16 || '').match(/^(([^:]+:)?\/?\/?(([^:\/\?#]+)?:?(\d+)?))(\/.*?)?(\?.*?)?(#.*)?$/); return { href: _64[0] || '', origin: _64[1] || '', protocol: _64[2] || '', host: _64[3] || '', hostname: _64[4] || '', port: _64[5] || '', pathname: _64[6] || '', search: _64[7] || '', hash: _64[8] || '' } } function _784() { try { _3.localStorage.setItem('mf_supportsLocalStorage', '1'); var _783 = _3.localStorage.getItem('mf_supportsLocalStorage') === '1'; _3.localStorage.removeItem('mf_supportsLocalStorage'); return _783 } catch (e) { return false } } this.debug = _3.mouseflowDebug || _81.search.indexOf('mf_debug=1') !== -1; this.includeDebugTime = false; this.forceStart = _81.search.indexOf('mf_force=1') !== -1; this.autoStart = _3.mouseflowAutoStart !== false && _81.search.indexOf('mf_autostart=0') === -1; this.enableBots = false; this.touchEvents = !_3.mouseflowDisableTouch; this.htmlDelay = _3.mouseflowHtmlDelay || 1000; this.newPageViewHtmlDelay = _3.mouseflowNewPageViewHtmlDelay || 500; this.compress = _3.mouseflowCompress !== false && _81.search.indexOf('mf_compress=0') === -1; this.autoTagging = _3.mouseflowAutoTagging !== false; this.path = _3.mouseflowPath; this.crossDomainSupport = !!_3.mouseflowCrossDomainSupport; this.location = _534(_3.mouseflowHref || _81.href); this.htmlFetchMode = _3.mouseflowHtmlFetchMode || 'post'; this.sessionId = _3.mouseflowSessionId; this.honorDoNotTrack = _3.mouseflowHonorDoNotTrack || _321; this.gdprEnabled = _3.mouseflowForceGdpr || _320; this.keyLogging = !_3.mouseflowDisableKeyLogging && !this.gdprEnabled; this.domReuse = !_3.mouseflowDisableDomReuse; this.domDeduplicator = !_3.mouseflowDisableDomDeduplicator; this.includeSubDomains = !_3.mouseflowExcludeSubDomains; this.registerSubmitTimeout = _3.mouseflowRegisterSubmitTimeout || 2000; this.useUnload = !!_3.mouseflowUseUnload; this.replaceLastFormValues = _3.mouseflowReplaceLastFormValues || !this.keyLogging || this.gdprEnabled; this.useAllHoverSelectors = !!_3.mouseflowUseAllHoverSelectors; this.enableCssRecording = !!_3.mouseflowEnableCssRecording; this.secureCookie = !!_3.mouseflowSecureCookie; this.domMutationDetectorEnable = _3.domMutationDetectorEnable !== undefined ? _3.domMutationDetectorEnable : false; this.domMutationUseParentNode = _3.domMutationUseParentNode !== undefined ? _3.domMutationUseParentNode : true; this.domMutationUsePreviousSibling = _3.domMutationUsePreviousSibling !== undefined ? _3.domMutationUsePreviousSibling : false; this.domMutationCountThreshold = _3.domMutationCountThreshold !== undefined ? _3.domMutationCountThreshold : 20; this.domMutationTimeThresholdInSeconds = _3.domMutationTimeThresholdInSeconds !== undefined ? _3.domMutationTimeThresholdInSeconds : 10; this.liveHeatmapsEnabled = false; this.privacyToolEnabled = false; this._765 = function () { if (!!_3.opener && _81.search.indexOf('mf_liveHeatmaps') !== -1) { this.liveHeatmapsEnabled = true; return } if (_81.search.indexOf('mf_inspect') !== -1) { this.privacyToolEnabled = true; return } if (!!_3.opener && (_3.name === 'mf_liveHeatmaps_init' || _3.name === 'mf_liveHeatmaps')) { this.liveHeatmapsEnabled = true; return } if (_3.name === 'mf_privacyTool') { this.privacyToolEnabled = true; return } if (!_784()) return; if (!!_3.localStorage.getItem('mf_privacyTool')) this.privacyToolEnabled = true; else if (!!_3.opener && !!_3.localStorage.getItem('mf_liveHeatmaps')) this.liveHeatmapsEnabled = true }; this._765(); this._550 = function (_23, _4) { switch (_23) { case 'href': this.location = _534(_4); break; case 'keyLogging': this.keyLogging = this.keyLogging && _4; break; case 'gdprEnabled': this.gdprEnabled = this.gdprEnabled || _4; break; default: this[_23] = _4; break } } } function _751(_3) { var _9 = _3.document, _163; function _266() { if (_9.body && !_163) { _163 = _785(); _9.body.appendChild(_163) } return _163 } function _397() { if (_163) { _9.body.removeChild(_163); _163 = undefined } } function _785() { var _29 = _9.createElement('div'); _29.id = 'mouseflow'; var _154 = _9.createElement('style'); _154.type = 'text/css'; _154.innerHTML = _764(); var _407 = _9.createElement('div'); _407.className = 'load-font'; _407.innerHTML = 'load font'; _29.appendChild(_154); _29.appendChild(_407); return _29 } function _764() { return ('@font-face {' + 'font-family: "Droid Sans";' + 'font-style: normal;' + 'font-weight: 400;' + 'src: local("Droid Sans Regular"), local("DroidSans-Regular"), url(https://fonts.gstatic.com/s/droidsans/v8/s-BiyweUPV0v-yRb-cjciPk_vArhqVIZ0nv9q090hN8.woff2) format("woff2");' + 'unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2212, U+2215;' + '}' + '#mouseflow :before, #mouseflow :after {' + 'display: none;' + '}' + '#mouseflow,' + '#mouseflow * {' + 'background: transparent;' + 'border: 0;' + 'border-image-outset: 0s;' + 'border-image-repeat: stretch;' + 'border-image-slice: 100%;' + 'border-image-source: none;' + 'border-image-width: 1;' + 'border-color: #000;' + 'border-radius: 0;' + 'border-width: 0;' + 'border-style: none;' + 'box-sizing: border-box;' + 'clip: auto;' + 'float: none;' + 'color: inherit;' + 'font-family: inherit;' + 'font-size: inherit;' + 'font-style: inherit;' + 'font-weight: inherit;' + 'width: auto;' + 'height: auto;' + 'min-width: auto;' + 'min-height: auto;' + 'max-width: auto;' + 'max-height: auto;' + 'letter-spacing: normal;' + 'line-height: normal;' + 'margin: 0;' + 'padding: 0;' + 'text-decoration: none;' + 'text-indent: 0;' + 'text-transform: none;' + 'vertical-align: baseline;' + 'text-align: left;' + 'overflow: visible;' + 'top: auto;' + 'right: auto;' + 'bottom: auto;' + 'left: auto;' + '-webkit-transition: none;' + 'transition: none;' + '}' + '#mouseflow {' + 'font: 400 14px/1.4 "Droid Sans", Helvetica, Arial, sans-serif;' + 'color: #666;' + '}' + '#mouseflow .load-font {' + 'position: absolute;' + 'visibility: hidden;' + 'width: 0px;' + 'height: 0px;' + 'overflow: hidden;' + '}') } this._266 = _266; this._397 = _397 } function _752(_3) { this._52 = function () { return _252('setTimeout').apply(_3, arguments) }; this._269 = function () { return _252('setInterval').apply(_3, arguments) }; this._116 = function () { _252('clearTimeout').apply(_3, arguments) }; this._151 = function () { _252('clearInterval').apply(_3, arguments) }; function _252(_25) { var _532; if (_3.Zone && _3.Zone.__symbol__) _532 = _3[_3.Zone.__symbol__(_25)]; return _532 || _3[_25] } } function _753(_3, _105, _308) { var _9 = _3.document; function _130(_2, _66) { var _80 = _2.classList; if (_80 && _66) return _80.contains(_66); var _129 = _148(_2); return _129.indexOf(_66) !== -1 } function _53(_2, _66) { var _80 = _2.classList; if (_80 && _66) { _2.classList.add(_66); return } var _129 = _148(_2); if (_129.indexOf(_66) === -1) _129.push(_66); _2.className = _129.join(' ') } function _40(_2, _66) { var _80 = _2.classList; if (_80 && _66) { _2.classList.remove(_66); return } var _129 = _148(_2); var _47 = _129.indexOf(_66); if (_47 !== -1) _129.splice(_47, 1); _2.className = _129.join(' ') } function _199(_2, _66, _403) { if (_403 === undefined) _403 = !_130(_2, _66); if (_403) { _53(_2, _66) } else { _40(_2, _66) } } function _148(_2) { var _531 = typeof _2.className === 'string' ? _2.className.replace(/\s+/g, ' ').trim() : ''; return _531 !== '' ? _531.split(' ') : [] } function _341() { return _105.max((_9.body || {}).scrollHeight || 0, (_9.body || {}).offsetHeight || 0, _9.documentElement.scrollHeight || 0, _9.documentElement.offsetHeight || 0, _9.documentElement.clientHeight || 0) } function _83(_35, _762) { var _30 = []; if (!_35) return _30; for (var _1 = 0; _1 < _35.length; _1++) { if (_762(_35[_1], _1)) _30.push(_35[_1]) } return _30 } function _521(_247) { var _251 = _247.length; while (_251) { var _1 = _105.floor(_105.random() * _251--); var _743 = _247[_251]; _247[_251] = _247[_1]; _247[_1] = _743 } } function _144(_32) { if (!_32) return _32; return _32.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;') } function _337(_32) { if (!_32) return _32; return _32.replace(/&amp;/g, '&').replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>') } function _333(url) { return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$/.test(url.trim()) } function _522(_32) { return _32.replace(/\[([^\]]+)\]\(([^\)]+)\)/g, function (_119, _744, _16) { _16 = _337(_16); return _333(_16) ? '<a href="' + _16 + '" target="_315">' + _744 + '</a>' : _119 }) } function _137(_4) { if (!_4) return _4; return _4.replace(/([^a-zA-Z\d-_])/g, '\\$1').replace(/^(-)?(\d)/, '$1\\3$2 ') } function _149(_4) { return _4 ? _308.parse(_4) : undefined } function _69(_4) { var _30; if (Array.prototype.toJSON) { var _745 = Array.prototype.toJSON; delete Array.prototype.toJSON; _30 = _308.stringify(_4); Array.prototype.toJSON = _745 } else if (_4) { _30 = _308.stringify(_4) } return _30 } function _523(_746, _747) { var _194 = _254(_746); var _32 = _254(_747); var _261 = _105.max(_194.length, _32.length); if (_32 == 'NaN' || _194 == 'NaN') { return false } for (var _1 = 0; _1 < _261; _1++) { _194[_1] = _194[_1] || 0; _32[_1] = _32[_1] || 0; if (_194[_1] == _32[_1]) { continue } return _194[_1] > _32[_1] } return true } function _254(_748) { var _519 = _748.split('.'); var _520 = []; for (var _1 = 0; _1 < _519.length; _1++) { _520.push(parseInt(_519[_1])) } return _520 } function _197(_32, _749) { var _30 = _32; while (_30[_30.length - 1] === (_749 || ' ')) _30 = _30.slice(0, -1); return _30 } function _64(_2, _7) { if (_2.nodeType !== 1) return false; if (_2.msMatchesSelector) return _2.msMatchesSelector(_7); if (_2.matches) return _2.matches(_7); return false } function _139(_58, _342) { return _58.parentNode && _58.parentNode.hasAttribute && _58.parentNode.hasAttribute(_342) } this._130 = _130; this._53 = _53; this._40 = _40; this._199 = _199; this._148 = _148; this._341 = _341; this._83 = _83; this._521 = _521; this._144 = _144; this._337 = _337; this._333 = _333; this._522 = _522; this._137 = _137; this._149 = _149; this._69 = _69; this._523 = _523; this._254 = _254; this._197 = _197; this._64 = _64; this._139 = _139 } var _320 = true; var _321 = false; var _335 = []; var _345 = []; var _14 = new _750(window, _320, _321); var _121 = new _751(window); var _22 = new _752(window); var _8 = new _753(window, Math, JSON); var _242 = new _754(_14, _8); var _17 = new _755(_8); var _196 = new _756(_14, _335, _345); var _300 = new _757(window, _121, _22, _8, _17); var _128 = (typeof _758 === 'function') ? new _758(window, _14, _121, _22, _8, _242, _17) : { _41: function () { }, _59: function () { }, _346: function () { }, _878: function () { }, _304: function () { } }; var _307 = new _759(_14); var _190 = new _760(window, _14, _121, _8, _17, _196); window.mouseflow = new _761(window, Math, _14, _22, _8, _242, _17, _196, _300, _128, _307, _190)
    })()
}